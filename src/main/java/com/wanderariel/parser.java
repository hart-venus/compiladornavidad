
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wanderariel;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\005\000\002\006" +
    "\003\000\002\006\004\000\002\007\004\000\002\010\006" +
    "\000\002\010\007\000\002\010\010\000\002\012\003\000" +
    "\002\012\005\000\002\013\004\000\002\020\006\000\002" +
    "\011\005\000\002\025\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\026\005\000\002\026\006" +
    "\000\002\026\006\000\002\026\005\000\002\026\005\000" +
    "\002\026\006\000\002\015\004\000\002\015\003\000\002" +
    "\021\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\007\000\002\016\007\000\002\016\005\000\002\016\005" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\100\006\001\002\000\004\052\037\001" +
    "\002\000\004\002\035\001\002\000\016\027\017\030\012" +
    "\031\014\032\015\033\013\076\016\001\002\000\006\002" +
    "\ufff2\100\ufff2\001\002\000\006\002\000\100\006\001\002" +
    "\000\006\002\ufff1\100\ufff1\001\002\000\004\026\ufffe\001" +
    "\002\000\004\026\ufffb\001\002\000\004\026\ufffd\001\002" +
    "\000\004\026\ufffc\001\002\000\004\046\033\001\002\000" +
    "\004\026\uffff\001\002\000\004\026\021\001\002\000\004" +
    "\046\022\001\002\000\016\027\017\030\012\031\014\032" +
    "\015\033\013\047\024\001\002\000\004\026\032\001\002" +
    "\000\004\052\uffee\001\002\000\006\047\027\075\030\001" +
    "\002\000\006\047\uffec\075\uffec\001\002\000\004\052\uffed" +
    "\001\002\000\014\027\017\030\012\031\014\032\015\033" +
    "\013\001\002\000\006\047\uffeb\075\uffeb\001\002\000\006" +
    "\047\uffea\075\uffea\001\002\000\004\047\034\001\002\000" +
    "\004\052\uffef\001\002\000\004\002\001\001\002\000\006" +
    "\002\ufff0\100\ufff0\001\002\000\040\013\044\014\055\025" +
    "\056\026\046\040\041\041\070\042\040\043\043\044\061" +
    "\045\063\046\057\062\067\071\064\072\071\101\065\001" +
    "\002\000\050\004\ufff8\005\ufff8\006\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\047\ufff8\051\ufff8\053\ufff8\073\ufff8" +
    "\075\ufff8\001\002\000\050\004\ufffa\005\ufffa\006\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\047\ufffa\051\ufffa\053" +
    "\ufffa\073\ufffa\075\ufffa\001\002\000\042\013\044\014\055" +
    "\025\056\026\046\040\041\041\070\042\040\043\043\044" +
    "\061\045\063\046\057\053\uffdc\062\067\071\064\072\071" +
    "\101\065\001\002\000\050\004\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\047\ufff7\051\ufff7\053" +
    "\ufff7\073\ufff7\075\ufff7\001\002\000\004\026\203\001\002" +
    "\000\044\004\uffd4\005\uffd4\006\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\047\uffd4\051\uffd4\073\uffd4\001\002\000" +
    "\046\004\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\046\141\050\140\073\uffd3\074\200\001\002" +
    "\000\044\004\uffcf\005\uffcf\006\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\047\uffcf\051\uffcf\073\uffcf\001\002\000" +
    "\004\073\177\001\002\000\004\073\176\001\002\000\004" +
    "\053\175\001\002\000\042\004\uffd2\005\uffd2\006\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\073\uffd2\074\173\001" +
    "\002\000\044\004\uffcd\005\uffcd\006\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\047\uffcd\051\uffcd\073\uffcd\001\002" +
    "\000\004\026\172\001\002\000\034\013\044\014\055\025" +
    "\056\026\101\040\041\041\070\042\040\043\043\044\061" +
    "\045\063\046\057\071\064\072\071\001\002\000\034\013" +
    "\044\014\055\025\056\026\101\040\041\041\070\042\040" +
    "\043\043\044\061\045\063\046\057\071\064\072\071\001" +
    "\002\000\040\004\107\005\110\006\104\010\111\011\112" +
    "\012\116\015\114\016\120\017\113\020\105\021\117\022" +
    "\106\023\115\024\121\073\165\001\002\000\050\004\ufff6" +
    "\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\047\ufff6\051\ufff6\053\ufff6\073\ufff6\075\ufff6\001\002\000" +
    "\044\004\uffce\005\uffce\006\uffce\010\uffce\011\uffce\012\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\047\uffce\051\uffce\073\uffce\001\002\000\050" +
    "\004\ufff5\005\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\047\ufff5\051\ufff5\053\ufff5\073\ufff5\075\ufff5\001" +
    "\002\000\004\046\161\001\002\000\014\027\017\030\012" +
    "\031\014\032\015\033\013\001\002\000\044\004\uffd0\005" +
    "\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\047" +
    "\uffd0\051\uffd0\073\uffd0\001\002\000\034\013\044\014\055" +
    "\025\056\026\101\040\041\041\070\042\040\043\043\044" +
    "\061\045\063\046\057\071\064\072\071\001\002\000\050" +
    "\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\047\ufff9\051\ufff9\053\ufff9\073\ufff9\075\ufff9\001" +
    "\002\000\004\046\072\001\002\000\020\040\041\041\070" +
    "\042\040\043\043\044\061\045\063\047\075\001\002\000" +
    "\006\047\076\075\077\001\002\000\010\047\ufff4\053\ufff4" +
    "\075\ufff4\001\002\000\044\004\uffdf\005\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\047\uffdf\051\uffdf\073" +
    "\uffdf\001\002\000\044\004\uffde\005\uffde\006\uffde\010\uffde" +
    "\011\uffde\012\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\047\uffde\051\uffde\073\uffde" +
    "\001\002\000\016\040\041\041\070\042\040\043\043\044" +
    "\061\045\063\001\002\000\010\047\ufff3\053\ufff3\075\ufff3" +
    "\001\002\000\050\004\uffd3\005\uffd3\006\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\046\141\047\uffd3\050\140\051" +
    "\uffd3\073\uffd3\001\002\000\044\004\uffd2\005\uffd2\006\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\047\uffd2\051\uffd2" +
    "\073\uffd2\001\002\000\040\004\107\005\110\006\104\010" +
    "\111\011\112\012\116\015\114\016\120\017\113\020\105" +
    "\021\117\022\106\023\115\024\121\073\uffe7\001\002\000" +
    "\034\013\044\014\055\025\056\026\101\040\041\041\070" +
    "\042\040\043\043\044\061\045\063\046\057\071\064\072" +
    "\071\001\002\000\034\013\044\014\055\025\056\026\101" +
    "\040\041\041\070\042\040\043\043\044\061\045\063\046" +
    "\057\071\064\072\071\001\002\000\034\013\044\014\055" +
    "\025\056\026\101\040\041\041\070\042\040\043\043\044" +
    "\061\045\063\046\057\071\064\072\071\001\002\000\034" +
    "\013\044\014\055\025\056\026\101\040\041\041\070\042" +
    "\040\043\043\044\061\045\063\046\057\071\064\072\071" +
    "\001\002\000\034\013\044\014\055\025\056\026\101\040" +
    "\041\041\070\042\040\043\043\044\061\045\063\046\057" +
    "\071\064\072\071\001\002\000\034\013\044\014\055\025" +
    "\056\026\101\040\041\041\070\042\040\043\043\044\061" +
    "\045\063\046\057\071\064\072\071\001\002\000\034\013" +
    "\044\014\055\025\056\026\101\040\041\041\070\042\040" +
    "\043\043\044\061\045\063\046\057\071\064\072\071\001" +
    "\002\000\034\013\044\014\055\025\056\026\101\040\041" +
    "\041\070\042\040\043\043\044\061\045\063\046\057\071" +
    "\064\072\071\001\002\000\034\013\044\014\055\025\056" +
    "\026\101\040\041\041\070\042\040\043\043\044\061\045" +
    "\063\046\057\071\064\072\071\001\002\000\034\013\044" +
    "\014\055\025\056\026\101\040\041\041\070\042\040\043" +
    "\043\044\061\045\063\046\057\071\064\072\071\001\002" +
    "\000\034\013\044\014\055\025\056\026\101\040\041\041" +
    "\070\042\040\043\043\044\061\045\063\046\057\071\064" +
    "\072\071\001\002\000\034\013\044\014\055\025\056\026" +
    "\101\040\041\041\070\042\040\043\043\044\061\045\063" +
    "\046\057\071\064\072\071\001\002\000\034\013\044\014" +
    "\055\025\056\026\101\040\041\041\070\042\040\043\043" +
    "\044\061\045\063\046\057\071\064\072\071\001\002\000" +
    "\034\013\044\014\055\025\056\026\101\040\041\041\070" +
    "\042\040\043\043\044\061\045\063\046\057\071\064\072" +
    "\071\001\002\000\044\004\uffbb\005\uffbb\006\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\047\uffbb\051\uffbb\073\uffbb" +
    "\001\002\000\044\004\uffc1\005\uffc1\006\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\117" +
    "\022\106\023\115\024\121\047\uffc1\051\uffc1\073\uffc1\001" +
    "\002\000\044\004\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\115\024\121\047\uffbe\051\uffbe\073\uffbe\001\002" +
    "\000\044\004\uffc7\005\uffc7\006\uffc7\010\uffc7\011\uffc7\012" +
    "\uffc7\015\114\016\120\017\113\020\105\021\117\022\106" +
    "\023\115\024\121\047\uffc7\051\uffc7\073\uffc7\001\002\000" +
    "\044\004\uffbc\005\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\121\047\uffbc\051\uffbc\073\uffbc\001\002\000\044" +
    "\004\uffc2\005\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\117\022\106\023\115" +
    "\024\121\047\uffc2\051\uffc2\073\uffc2\001\002\000\044\004" +
    "\uffc0\005\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\117\022\106\023\115\024" +
    "\121\047\uffc0\051\uffc0\073\uffc0\001\002\000\044\004\uffc8" +
    "\005\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\015\114\016" +
    "\120\017\113\020\105\021\117\022\106\023\115\024\121" +
    "\047\uffc8\051\uffc8\073\uffc8\001\002\000\044\004\uffc9\005" +
    "\uffc9\006\uffc9\010\uffc9\011\112\012\116\015\114\016\120" +
    "\017\113\020\105\021\117\022\106\023\115\024\121\047" +
    "\uffc9\051\uffc9\073\uffc9\001\002\000\044\004\uffcb\005\uffcb" +
    "\006\104\010\111\011\112\012\116\015\114\016\120\017" +
    "\113\020\105\021\117\022\106\023\115\024\121\047\uffcb" +
    "\051\uffcb\073\uffcb\001\002\000\044\004\uffcc\005\uffcc\006" +
    "\104\010\111\011\112\012\116\015\114\016\120\017\113" +
    "\020\105\021\117\022\106\023\115\024\121\047\uffcc\051" +
    "\uffcc\073\uffcc\001\002\000\044\004\uffbd\005\uffbd\006\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\115\024\121\047\uffbd\051\uffbd" +
    "\073\uffbd\001\002\000\044\004\uffbf\005\uffbf\006\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\117\022\106\023\115\024\121\047\uffbf\051\uffbf\073" +
    "\uffbf\001\002\000\044\004\uffca\005\uffca\006\uffca\010\uffca" +
    "\011\112\012\116\015\114\016\120\017\113\020\105\021" +
    "\117\022\106\023\115\024\121\047\uffca\051\uffca\073\uffca" +
    "\001\002\000\034\013\044\014\055\025\056\026\101\040" +
    "\041\041\070\042\040\043\043\044\061\045\063\046\057" +
    "\071\064\072\071\001\002\000\020\040\041\041\070\042" +
    "\040\043\043\044\061\045\063\047\143\001\002\000\006" +
    "\047\144\075\077\001\002\000\044\004\uffe3\005\uffe3\006" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\047\uffe3\051" +
    "\uffe3\073\uffe3\001\002\000\044\004\uffe2\005\uffe2\006\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\047\uffe2\051\uffe2" +
    "\073\uffe2\001\002\000\040\004\107\005\110\006\104\010" +
    "\111\011\112\012\116\015\114\016\120\017\113\020\105" +
    "\021\117\022\106\023\115\024\121\051\146\001\002\000" +
    "\046\004\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\047\uffe9\051\uffe9\073\uffe9\074\uffe9\001\002" +
    "\000\004\026\151\001\002\000\006\073\uffd9\074\154\001" +
    "\002\000\010\050\140\073\uffda\074\152\001\002\000\034" +
    "\013\044\014\055\025\056\026\101\040\041\041\070\042" +
    "\040\043\043\044\061\045\063\046\057\071\064\072\071" +
    "\001\002\000\040\004\107\005\110\006\104\010\111\011" +
    "\112\012\116\015\114\016\120\017\113\020\105\021\117" +
    "\022\106\023\115\024\121\073\uffd8\001\002\000\004\052" +
    "\156\001\002\000\004\073\uffd7\001\002\000\016\040\041" +
    "\041\070\042\040\043\043\044\061\045\063\001\002\000" +
    "\006\053\160\075\077\001\002\000\004\073\uffdb\001\002" +
    "\000\020\040\041\041\070\042\040\043\043\044\061\045" +
    "\063\047\163\001\002\000\006\047\164\075\077\001\002" +
    "\000\044\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\047\uffe0\051\uffe0\073\uffe0\001\002\000" +
    "\044\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\047\uffe1\051\uffe1\073\uffe1\001\002\000\042" +
    "\013\uffe4\014\uffe4\025\uffe4\026\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\053\uffe4\062\uffe4" +
    "\071\uffe4\072\uffe4\101\uffe4\001\002\000\040\004\107\005" +
    "\110\006\104\010\111\011\112\012\116\015\114\016\120" +
    "\017\113\020\105\021\117\022\106\023\115\024\121\047" +
    "\167\001\002\000\044\004\uffd1\005\uffd1\006\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\047\uffd1\051\uffd1\073\uffd1" +
    "\001\002\000\044\004\uffba\005\uffba\006\uffba\010\uffba\011" +
    "\uffba\012\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\047\uffba\051\uffba\073\uffba\001" +
    "\002\000\044\004\uffc4\005\uffc4\006\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\047\uffc4\051\uffc4\073\uffc4\001\002" +
    "\000\046\004\uffc5\005\uffc5\006\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\047\uffc5\050\140\051\uffc5\073\uffc5\001" +
    "\002\000\034\013\044\014\055\025\056\026\101\040\041" +
    "\041\070\042\040\043\043\044\061\045\063\046\057\071" +
    "\064\072\071\001\002\000\040\004\107\005\110\006\104" +
    "\010\111\011\112\012\116\015\114\016\120\017\113\020" +
    "\105\021\117\022\106\023\115\024\121\073\uffd5\001\002" +
    "\000\006\002\uffe8\100\uffe8\001\002\000\042\013\uffe5\014" +
    "\uffe5\025\uffe5\026\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\053\uffe5\062\uffe5\071\uffe5\072" +
    "\uffe5\101\uffe5\001\002\000\042\013\uffe6\014\uffe6\025\uffe6" +
    "\026\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\053\uffe6\062\uffe6\071\uffe6\072\uffe6\101\uffe6" +
    "\001\002\000\034\013\044\014\055\025\056\026\101\040" +
    "\041\041\070\042\040\043\043\044\061\045\063\046\057" +
    "\071\064\072\071\001\002\000\040\004\107\005\110\006" +
    "\104\010\111\011\112\012\116\015\114\016\120\017\113" +
    "\020\105\021\117\022\106\023\115\024\121\073\uffd6\001" +
    "\002\000\044\004\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\047\uffc3\051\uffc3\073\uffc3\001\002" +
    "\000\046\004\uffc6\005\uffc6\006\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\047\uffc6\050\140\051\uffc6\073\uffc6\001" +
    "\002\000\004\053\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\012\002\004\006\007\007\006\010\003\001" +
    "\001\000\004\011\035\001\001\000\002\001\001\000\004" +
    "\003\017\001\001\000\002\001\001\000\006\007\010\010" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\022\012\024\013\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\022\013\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\044\014\041\015\051\016\047\017\057\020\052\022\065" +
    "\023\046\024\061\025\050\026\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\044\014\041\015\203" +
    "\016\047\017\057\020\052\022\065\023\046\024\061\025" +
    "\050\026\053\001\001\000\002\001\001\000\004\020\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\170\001" +
    "\001\000\020\004\044\017\167\020\101\022\065\023\046" +
    "\024\061\026\053\001\001\000\020\004\044\017\165\020" +
    "\101\022\065\023\046\024\061\026\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\146\001\001\000\002" +
    "\001\001\000\020\004\044\017\102\020\101\022\065\023" +
    "\046\024\061\026\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\073\005\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\044" +
    "\017\136\020\101\022\065\023\046\024\061\026\053\001" +
    "\001\000\020\004\044\017\135\020\101\022\065\023\046" +
    "\024\061\026\053\001\001\000\020\004\044\017\134\020" +
    "\101\022\065\023\046\024\061\026\053\001\001\000\020" +
    "\004\044\017\133\020\101\022\065\023\046\024\061\026" +
    "\053\001\001\000\020\004\044\017\132\020\101\022\065" +
    "\023\046\024\061\026\053\001\001\000\020\004\044\017" +
    "\131\020\101\022\065\023\046\024\061\026\053\001\001" +
    "\000\020\004\044\017\130\020\101\022\065\023\046\024" +
    "\061\026\053\001\001\000\020\004\044\017\127\020\101" +
    "\022\065\023\046\024\061\026\053\001\001\000\020\004" +
    "\044\017\126\020\101\022\065\023\046\024\061\026\053" +
    "\001\001\000\020\004\044\017\125\020\101\022\065\023" +
    "\046\024\061\026\053\001\001\000\020\004\044\017\124" +
    "\020\101\022\065\023\046\024\061\026\053\001\001\000" +
    "\020\004\044\017\123\020\101\022\065\023\046\024\061" +
    "\026\053\001\001\000\020\004\044\017\122\020\101\022" +
    "\065\023\046\024\061\026\053\001\001\000\020\004\044" +
    "\017\121\020\101\022\065\023\046\024\061\026\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\044\017\144\020\101" +
    "\022\065\023\046\024\061\026\053\001\001\000\006\004" +
    "\073\005\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\044\017\152\020\101\022\065\023\046\024" +
    "\061\026\053\001\001\000\002\001\001\000\004\021\154" +
    "\001\001\000\002\001\001\000\006\004\073\005\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\073" +
    "\005\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\044\017\173\020\101\022\065\023\046" +
    "\024\061\026\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\044" +
    "\017\200\020\101\022\065\023\046\024\061\026\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  Lexer lex;

  /**
  * Constructor de la clase parser
  * entrada: un lexer
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: inicializar el lexer y el symbolFactory
  */
  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }
  
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  /** 
  * funciones públicas de pruebas para el lexer, por ahora
  * solo imprimen en consola
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola
  */
  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios");
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= funciones_bolsa_navidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // t_santa ::= t_int_colacho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // t_santa ::= t_float_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t_santa ::= t_bool_noel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t_santa ::= t_char_pascuero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_santa ::= t_string_kris 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // l_santa ::= l_int_colacho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_santa ::= l_float_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_santa ::= l_t_noel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_santa ::= l_f_noel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_santa ::= l_char_pascuero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_santa ::= l_string_kris 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // args_santa ::= l_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // args_santa ::= args_santa sep_regalo l_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones_bolsa_navidena ::= funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones_bolsa_navidena ::= funciones_bolsa_navidena funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_ayudante_santa ::= def_funcion_trineo bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_ayudante_santa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_funcion_trineo ::= function_chimenea main_navidad p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento parametros_funcion_renos p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros_funcion_renos ::= parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_funcion_renos ::= parametros_funcion_renos sep_regalo parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro_funcion_reno ::= t_santa id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_reno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elemento_arreglo_juguete ::= id_persona p_abre_empaque expresion_regalo p_cierra_empaque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento_arreglo_juguete",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_codigo_casa_jengibre ::= cb_abre_regalo lineas_hombre_jengibre cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_casa_jengibre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // retorno_carta_santa ::= return_envia expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno_carta_santa",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // linea_hombre_jengibre ::= asignacion_adorno fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // linea_hombre_jengibre ::= retorno_carta_santa fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linea_hombre_jengibre ::= expresion_regalo fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // llamada_func_pino ::= id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamada_func_pino ::= id_persona p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // llamada_func_pino ::= print_habla p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // llamada_func_pino ::= print_habla p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // llamada_func_pino ::= read_escucha p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // llamada_func_pino ::= read_escucha p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lineas_hombre_jengibre ::= linea_hombre_jengibre lineas_hombre_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lineas_hombre_jengibre ::= linea_hombre_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // l_arr_gordo ::= cb_abre_regalo args_santa cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_arr_gordo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion_adorno ::= local_dulce t_santa id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion_adorno ::= local_dulce t_santa elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion_adorno ::= local_dulce t_santa id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_adorno ::= local_dulce t_santa elemento_arreglo_juguete assign_entregar l_arr_gordo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion_adorno ::= id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion_adorno ::= elemento_arreglo_juguete assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_regalo ::= l_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_regalo ::= id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_regalo ::= elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_regalo ::= p_abre_cuento expresion_regalo p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_regalo ::= expr_ar_regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_regalo ::= expr_rel_regalocomprado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_regalo ::= expr_log_regalomanual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_regalo ::= llamada_func_pino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_ar_regaloprin ::= expresion_regalo op_res_rodolfo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_ar_regaloprin ::= expresion_regalo op_sum_cupido expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_ar_regaloprin ::= expresion_regalo op_div_bailarin expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_ar_regaloprin ::= expresion_regalo op_mul_cometa expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_ar_regaloprin ::= expresion_regalo op_mod_rayo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_ar_regaloprin ::= expresion_regalo op_pow_travieso expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_ar_regaloprin ::= op_inc_quien id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_ar_regaloprin ::= op_dec_grinch id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_ar_regaloprin ::= op_dec_grinch elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_ar_regaloprin ::= op_inc_quien elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_rel_regalocomprado ::= expresion_regalo op_eq_astuto expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_rel_regalocomprado ::= expresion_regalo op_l_nevado expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_rel_regalocomprado ::= expresion_regalo op_g_alegre expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_rel_regalocomprado ::= expresion_regalo op_geq_feliz expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_rel_regalocomprado ::= expresion_regalo op_leq_copito expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_rel_regalocomprado ::= expresion_regalo op_neq_chispa expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_log_regalomanual ::= expresion_regalo op_and_melchor expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_log_regalomanual ::= expresion_regalo op_or_gaspar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_log_regalomanual ::= op_not_baltasar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
