
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wanderariel;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\005\000\002\006" +
    "\003\000\002\006\004\000\002\007\004\000\002\007\005" +
    "\000\002\010\006\000\002\010\007\000\002\010\010\000" +
    "\002\012\003\000\002\012\005\000\002\013\004\000\002" +
    "\020\006\000\002\011\005\000\002\025\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\004\000\002\026\005\000\002" +
    "\026\006\000\002\026\006\000\002\026\005\000\002\026" +
    "\005\000\002\026\006\000\002\015\004\000\002\015\003" +
    "\000\002\021\005\000\002\027\010\000\002\030\013\000" +
    "\002\031\007\000\002\031\010\000\002\031\010\000\002" +
    "\031\011\000\002\032\003\000\002\032\004\000\002\033" +
    "\007\000\002\034\004\000\002\016\005\000\002\016\005" +
    "\000\002\016\007\000\002\016\007\000\002\016\005\000" +
    "\002\016\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\003\004\100\007\001\002\000\004\100" +
    "\007\001\002\000\004\052\040\001\002\000\004\002\036" +
    "\001\002\000\016\027\020\030\013\031\015\032\016\033" +
    "\014\076\017\001\002\000\010\002\ufff2\003\ufff2\100\ufff2" +
    "\001\002\000\010\002\000\003\004\100\007\001\002\000" +
    "\010\002\ufff1\003\ufff1\100\ufff1\001\002\000\004\026\ufffe" +
    "\001\002\000\004\026\ufffb\001\002\000\004\026\ufffd\001" +
    "\002\000\004\026\ufffc\001\002\000\004\046\034\001\002" +
    "\000\004\026\uffff\001\002\000\004\026\022\001\002\000" +
    "\004\046\023\001\002\000\016\027\020\030\013\031\015" +
    "\032\016\033\014\047\025\001\002\000\004\026\033\001" +
    "\002\000\004\052\uffed\001\002\000\006\047\030\075\031" +
    "\001\002\000\006\047\uffeb\075\uffeb\001\002\000\004\052" +
    "\uffec\001\002\000\014\027\020\030\013\031\015\032\016" +
    "\033\014\001\002\000\006\047\uffea\075\uffea\001\002\000" +
    "\006\047\uffe9\075\uffe9\001\002\000\004\047\035\001\002" +
    "\000\004\052\uffee\001\002\000\004\002\001\001\002\000" +
    "\010\002\ufff0\003\ufff0\100\ufff0\001\002\000\054\003\060" +
    "\013\102\014\050\025\042\026\056\040\064\041\073\042" +
    "\071\043\061\044\057\045\066\046\076\052\040\054\052" +
    "\057\041\060\063\062\047\063\072\071\103\072\074\101" +
    "\044\001\002\000\004\046\247\001\002\000\034\013\102" +
    "\014\050\025\042\026\106\040\064\041\073\042\071\043" +
    "\061\044\057\045\066\046\076\071\103\072\074\001\002" +
    "\000\050\004\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\047\uffc3\051\uffc3\053\uffc3\073\uffc3\075" +
    "\uffc3\001\002\000\014\027\020\030\013\031\015\032\016" +
    "\033\014\001\002\000\050\004\uffbf\005\uffbf\006\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\047\uffbf\051\uffbf\053" +
    "\uffbf\073\uffbf\075\uffbf\001\002\000\004\073\233\001\002" +
    "\000\034\013\102\014\050\025\042\026\106\040\064\041" +
    "\073\042\071\043\061\044\057\045\066\046\076\071\103" +
    "\072\074\001\002\000\004\026\231\001\002\000\056\003" +
    "\uffde\013\uffde\014\uffde\025\uffde\026\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\052\uffde\053" +
    "\uffde\054\uffde\057\uffde\060\uffde\062\uffde\063\uffde\071\uffde" +
    "\072\uffde\101\uffde\001\002\000\004\046\210\001\002\000" +
    "\042\004\uffc1\005\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\073\uffc1\074\206\001\002\000\050\004\uffbc" +
    "\005\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\047\uffbc\051\uffbc\053\uffbc\073\uffbc\075\uffbc\001\002\000" +
    "\040\004\115\005\116\006\112\010\117\011\120\012\124" +
    "\015\122\016\126\017\121\020\113\021\125\022\114\023" +
    "\123\024\127\073\205\001\002\000\046\004\uffc2\005\uffc2" +
    "\006\uffc2\010\uffc2\011\uffc2\012\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\046\147" +
    "\050\146\073\uffc2\074\203\001\002\000\050\004\ufff6\005" +
    "\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\047" +
    "\ufff6\051\ufff6\053\ufff6\073\ufff6\075\ufff6\001\002\000\004" +
    "\073\202\001\002\000\050\004\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\047\ufff7\051\ufff7\053" +
    "\ufff7\073\ufff7\075\ufff7\001\002\000\050\004\uffbd\005\uffbd" +
    "\006\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\047\uffbd" +
    "\051\uffbd\053\uffbd\073\uffbd\075\uffbd\001\002\000\004\052" +
    "\040\001\002\000\050\004\ufffa\005\ufffa\006\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\047\ufffa\051\ufffa\053\ufffa" +
    "\073\ufffa\075\ufffa\001\002\000\056\003\uffe0\013\uffe0\014" +
    "\uffe0\025\uffe0\026\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\052\uffe0\053\uffe0\054\uffe0\057" +
    "\uffe0\060\uffe0\062\uffe0\063\uffe0\071\uffe0\072\uffe0\101\uffe0" +
    "\001\002\000\050\004\ufff5\005\ufff5\006\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\047\ufff5\051\ufff5\053\ufff5\073" +
    "\ufff5\075\ufff5\001\002\000\050\004\uffbe\005\uffbe\006\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\047\uffbe\051\uffbe" +
    "\053\uffbe\073\uffbe\075\uffbe\001\002\000\004\073\174\001" +
    "\002\000\050\004\ufff8\005\ufff8\006\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\047\ufff8\051\ufff8\053\ufff8\073\ufff8" +
    "\075\ufff8\001\002\000\004\073\173\001\002\000\050\004" +
    "\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\047\ufff9\051\ufff9\053\ufff9\073\ufff9\075\ufff9\001\002" +
    "\000\004\046\167\001\002\000\056\003\060\013\102\014" +
    "\050\025\042\026\056\040\064\041\073\042\071\043\061" +
    "\044\057\045\066\046\076\052\040\053\uffd5\054\052\057" +
    "\041\060\063\062\047\063\072\071\103\072\074\101\044" +
    "\001\002\000\034\013\102\014\050\025\042\026\106\040" +
    "\064\041\073\042\071\043\061\044\057\045\066\046\076" +
    "\071\103\072\074\001\002\000\004\073\163\001\002\000" +
    "\056\003\uffdf\013\uffdf\014\uffdf\025\uffdf\026\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf" +
    "\071\uffdf\072\uffdf\101\uffdf\001\002\000\004\053\162\001" +
    "\002\000\004\026\161\001\002\000\004\046\104\001\002" +
    "\000\036\013\102\014\050\025\042\026\106\040\064\041" +
    "\073\042\071\043\061\044\057\045\066\046\076\047\111" +
    "\071\103\072\074\001\002\000\006\047\157\075\153\001" +
    "\002\000\054\004\uffc2\005\uffc2\006\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\046\147\047\uffc2\050\146\051\uffc2" +
    "\053\uffc2\073\uffc2\075\uffc2\001\002\000\050\004\uffc1\005" +
    "\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\047" +
    "\uffc1\051\uffc1\053\uffc1\073\uffc1\075\uffc1\001\002\000\044" +
    "\004\115\005\116\006\112\010\117\011\120\012\124\015" +
    "\122\016\126\017\121\020\113\021\125\022\114\023\123" +
    "\024\127\047\ufff4\053\ufff4\075\ufff4\001\002\000\050\004" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\047\uffd9\051\uffd9\053\uffd9\073\uffd9\075\uffd9\001\002" +
    "\000\034\013\102\014\050\025\042\026\106\040\064\041" +
    "\073\042\071\043\061\044\057\045\066\046\076\071\103" +
    "\072\074\001\002\000\034\013\102\014\050\025\042\026" +
    "\106\040\064\041\073\042\071\043\061\044\057\045\066" +
    "\046\076\071\103\072\074\001\002\000\034\013\102\014" +
    "\050\025\042\026\106\040\064\041\073\042\071\043\061" +
    "\044\057\045\066\046\076\071\103\072\074\001\002\000" +
    "\034\013\102\014\050\025\042\026\106\040\064\041\073" +
    "\042\071\043\061\044\057\045\066\046\076\071\103\072" +
    "\074\001\002\000\034\013\102\014\050\025\042\026\106" +
    "\040\064\041\073\042\071\043\061\044\057\045\066\046" +
    "\076\071\103\072\074\001\002\000\034\013\102\014\050" +
    "\025\042\026\106\040\064\041\073\042\071\043\061\044" +
    "\057\045\066\046\076\071\103\072\074\001\002\000\034" +
    "\013\102\014\050\025\042\026\106\040\064\041\073\042" +
    "\071\043\061\044\057\045\066\046\076\071\103\072\074" +
    "\001\002\000\034\013\102\014\050\025\042\026\106\040" +
    "\064\041\073\042\071\043\061\044\057\045\066\046\076" +
    "\071\103\072\074\001\002\000\034\013\102\014\050\025" +
    "\042\026\106\040\064\041\073\042\071\043\061\044\057" +
    "\045\066\046\076\071\103\072\074\001\002\000\034\013" +
    "\102\014\050\025\042\026\106\040\064\041\073\042\071" +
    "\043\061\044\057\045\066\046\076\071\103\072\074\001" +
    "\002\000\034\013\102\014\050\025\042\026\106\040\064" +
    "\041\073\042\071\043\061\044\057\045\066\046\076\071" +
    "\103\072\074\001\002\000\034\013\102\014\050\025\042" +
    "\026\106\040\064\041\073\042\071\043\061\044\057\045" +
    "\066\046\076\071\103\072\074\001\002\000\034\013\102" +
    "\014\050\025\042\026\106\040\064\041\073\042\071\043" +
    "\061\044\057\045\066\046\076\071\103\072\074\001\002" +
    "\000\034\013\102\014\050\025\042\026\106\040\064\041" +
    "\073\042\071\043\061\044\057\045\066\046\076\071\103" +
    "\072\074\001\002\000\050\004\uffaa\005\uffaa\006\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\047\uffaa\051\uffaa\053" +
    "\uffaa\073\uffaa\075\uffaa\001\002\000\050\004\uffb0\005\uffb0" +
    "\006\uffb0\010\uffb0\011\uffb0\012\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\125\022\114\023\123\024\127\047\uffb0" +
    "\051\uffb0\053\uffb0\073\uffb0\075\uffb0\001\002\000\050\004" +
    "\uffad\005\uffad\006\uffad\010\uffad\011\uffad\012\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\123\024" +
    "\127\047\uffad\051\uffad\053\uffad\073\uffad\075\uffad\001\002" +
    "\000\050\004\uffb6\005\uffb6\006\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\015\122\016\126\017\121\020\113\021\125\022\114" +
    "\023\123\024\127\047\uffb6\051\uffb6\053\uffb6\073\uffb6\075" +
    "\uffb6\001\002\000\050\004\uffab\005\uffab\006\uffab\010\uffab" +
    "\011\uffab\012\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\127\047\uffab\051\uffab\053\uffab" +
    "\073\uffab\075\uffab\001\002\000\050\004\uffb1\005\uffb1\006" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\125\022\114\023\123\024\127\047\uffb1\051" +
    "\uffb1\053\uffb1\073\uffb1\075\uffb1\001\002\000\050\004\uffaf" +
    "\005\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\125\022\114\023\123\024\127" +
    "\047\uffaf\051\uffaf\053\uffaf\073\uffaf\075\uffaf\001\002\000" +
    "\050\004\uffb7\005\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\015\122\016\126\017\121\020\113\021\125\022\114\023" +
    "\123\024\127\047\uffb7\051\uffb7\053\uffb7\073\uffb7\075\uffb7" +
    "\001\002\000\050\004\uffb8\005\uffb8\006\uffb8\010\uffb8\011" +
    "\120\012\124\015\122\016\126\017\121\020\113\021\125" +
    "\022\114\023\123\024\127\047\uffb8\051\uffb8\053\uffb8\073" +
    "\uffb8\075\uffb8\001\002\000\050\004\uffba\005\uffba\006\112" +
    "\010\117\011\120\012\124\015\122\016\126\017\121\020" +
    "\113\021\125\022\114\023\123\024\127\047\uffba\051\uffba" +
    "\053\uffba\073\uffba\075\uffba\001\002\000\050\004\uffbb\005" +
    "\uffbb\006\112\010\117\011\120\012\124\015\122\016\126" +
    "\017\121\020\113\021\125\022\114\023\123\024\127\047" +
    "\uffbb\051\uffbb\053\uffbb\073\uffbb\075\uffbb\001\002\000\050" +
    "\004\uffac\005\uffac\006\uffac\010\uffac\011\uffac\012\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\123" +
    "\024\127\047\uffac\051\uffac\053\uffac\073\uffac\075\uffac\001" +
    "\002\000\050\004\uffae\005\uffae\006\uffae\010\uffae\011\uffae" +
    "\012\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\125\022" +
    "\114\023\123\024\127\047\uffae\051\uffae\053\uffae\073\uffae" +
    "\075\uffae\001\002\000\050\004\uffb9\005\uffb9\006\uffb9\010" +
    "\uffb9\011\120\012\124\015\122\016\126\017\121\020\113" +
    "\021\125\022\114\023\123\024\127\047\uffb9\051\uffb9\053" +
    "\uffb9\073\uffb9\075\uffb9\001\002\000\034\013\102\014\050" +
    "\025\042\026\106\040\064\041\073\042\071\043\061\044" +
    "\057\045\066\046\076\071\103\072\074\001\002\000\036" +
    "\013\102\014\050\025\042\026\106\040\064\041\073\042" +
    "\071\043\061\044\057\045\066\046\076\047\151\071\103" +
    "\072\074\001\002\000\006\047\152\075\153\001\002\000" +
    "\050\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\047\uffdc\051\uffdc\053\uffdc\073\uffdc\075\uffdc" +
    "\001\002\000\050\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\047\uffdb\051\uffdb\053\uffdb\073" +
    "\uffdb\075\uffdb\001\002\000\034\013\102\014\050\025\042" +
    "\026\106\040\064\041\073\042\071\043\061\044\057\045" +
    "\066\046\076\071\103\072\074\001\002\000\044\004\115" +
    "\005\116\006\112\010\117\011\120\012\124\015\122\016" +
    "\126\017\121\020\113\021\125\022\114\023\123\024\127" +
    "\047\ufff3\053\ufff3\075\ufff3\001\002\000\040\004\115\005" +
    "\116\006\112\010\117\011\120\012\124\015\122\016\126" +
    "\017\121\020\113\021\125\022\114\023\123\024\127\051" +
    "\156\001\002\000\052\004\uffe8\005\uffe8\006\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\047\uffe8\051\uffe8\053\uffe8" +
    "\073\uffe8\074\uffe8\075\uffe8\001\002\000\050\004\uffda\005" +
    "\uffda\006\uffda\010\uffda\011\uffda\012\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\047" +
    "\uffda\051\uffda\053\uffda\073\uffda\075\uffda\001\002\000\050" +
    "\004\uffb2\005\uffb2\006\uffb2\010\uffb2\011\uffb2\012\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\047\uffb2\051\uffb2\053\uffb2\073\uffb2\075\uffb2\001" +
    "\002\000\052\004\uffb5\005\uffb5\006\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\047\uffb5\050\146\051\uffb5\053\uffb5" +
    "\073\uffb5\075\uffb5\001\002\000\070\002\uffe7\003\uffe7\013" +
    "\uffe7\014\uffe7\025\uffe7\026\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\071\uffe7\072\uffe7\100\uffe7\101\uffe7\001\002\000" +
    "\056\003\uffe5\013\uffe5\014\uffe5\025\uffe5\026\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5" +
    "\071\uffe5\072\uffe5\101\uffe5\001\002\000\040\004\115\005" +
    "\116\006\112\010\117\011\120\012\124\015\122\016\126" +
    "\017\121\020\113\021\125\022\114\023\123\024\127\047" +
    "\165\001\002\000\050\004\uffc0\005\uffc0\006\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\047\uffc0\051\uffc0\053\uffc0" +
    "\073\uffc0\075\uffc0\001\002\000\004\053\uffd6\001\002\000" +
    "\036\013\102\014\050\025\042\026\106\040\064\041\073" +
    "\042\071\043\061\044\057\045\066\046\076\047\171\071" +
    "\103\072\074\001\002\000\006\047\172\075\153\001\002" +
    "\000\050\004\uffd8\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\047\uffd8\051\uffd8\053\uffd8\073\uffd8\075" +
    "\uffd8\001\002\000\050\004\uffd7\005\uffd7\006\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\047\uffd7\051\uffd7\053\uffd7" +
    "\073\uffd7\075\uffd7\001\002\000\056\003\uffe2\013\uffe2\014" +
    "\uffe2\025\uffe2\026\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\052\uffe2\053\uffe2\054\uffe2\057" +
    "\uffe2\060\uffe2\062\uffe2\063\uffe2\071\uffe2\072\uffe2\101\uffe2" +
    "\001\002\000\056\003\uffe1\013\uffe1\014\uffe1\025\uffe1\026" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\052\uffe1\053\uffe1\054\uffe1\057\uffe1\060\uffe1\062" +
    "\uffe1\063\uffe1\071\uffe1\072\uffe1\101\uffe1\001\002\000\004" +
    "\061\176\001\002\000\004\046\177\001\002\000\034\013" +
    "\102\014\050\025\042\026\106\040\064\041\073\042\071" +
    "\043\061\044\057\045\066\046\076\071\103\072\074\001" +
    "\002\000\040\004\115\005\116\006\112\010\117\011\120" +
    "\012\124\015\122\016\126\017\121\020\113\021\125\022" +
    "\114\023\123\024\127\047\201\001\002\000\004\073\uffd3" +
    "\001\002\000\056\003\uffdd\013\uffdd\014\uffdd\025\uffdd\026" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\052\uffdd\053\uffdd\054\uffdd\057\uffdd\060\uffdd\062" +
    "\uffdd\063\uffdd\071\uffdd\072\uffdd\101\uffdd\001\002\000\034" +
    "\013\102\014\050\025\042\026\106\040\064\041\073\042" +
    "\071\043\061\044\057\045\066\046\076\071\103\072\074" +
    "\001\002\000\040\004\115\005\116\006\112\010\117\011" +
    "\120\012\124\015\122\016\126\017\121\020\113\021\125" +
    "\022\114\023\123\024\127\073\uffc5\001\002\000\056\003" +
    "\uffe3\013\uffe3\014\uffe3\025\uffe3\026\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\057\uffe3\060\uffe3\062\uffe3\063\uffe3\071\uffe3" +
    "\072\uffe3\101\uffe3\001\002\000\034\013\102\014\050\025" +
    "\042\026\106\040\064\041\073\042\071\043\061\044\057" +
    "\045\066\046\076\071\103\072\074\001\002\000\040\004" +
    "\115\005\116\006\112\010\117\011\120\012\124\015\122" +
    "\016\126\017\121\020\113\021\125\022\114\023\123\024" +
    "\127\073\uffc4\001\002\000\034\013\102\014\050\025\042" +
    "\026\106\040\064\041\073\042\071\043\061\044\057\045" +
    "\066\046\076\071\103\072\074\001\002\000\040\004\115" +
    "\005\116\006\112\010\117\011\120\012\124\015\122\016" +
    "\126\017\121\020\113\021\125\022\114\023\123\024\127" +
    "\047\212\001\002\000\004\052\040\001\002\000\062\003" +
    "\uffd1\013\uffd1\014\uffd1\025\uffd1\026\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\214\056\216\057\uffd1\060\uffd1\062\uffd1" +
    "\063\uffd1\071\uffd1\072\uffd1\101\uffd1\001\002\000\004\046" +
    "\224\001\002\000\060\003\uffd0\013\uffd0\014\uffd0\025\uffd0" +
    "\026\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\052\uffd0\053\uffd0\054\uffd0\056\216\057\uffd0" +
    "\060\uffd0\062\uffd0\063\uffd0\071\uffd0\072\uffd0\101\uffd0\001" +
    "\002\000\004\052\040\001\002\000\056\003\uffcf\013\uffcf" +
    "\014\uffcf\025\uffcf\026\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\057\uffcf\060\uffcf\062\uffcf\063\uffcf\071\uffcf\072\uffcf\101" +
    "\uffcf\001\002\000\062\003\uffcd\013\uffcd\014\uffcd\025\uffcd" +
    "\026\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\052\uffcd\053\uffcd\054\uffcd\055\214\056\uffcd" +
    "\057\uffcd\060\uffcd\062\uffcd\063\uffcd\071\uffcd\072\uffcd\101" +
    "\uffcd\001\002\000\060\003\uffcc\013\uffcc\014\uffcc\025\uffcc" +
    "\026\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\062\uffcc\063\uffcc\071\uffcc\072\uffcc\101\uffcc\001" +
    "\002\000\056\003\uffca\013\uffca\014\uffca\025\uffca\026\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\052\uffca\053\uffca\054\uffca\057\uffca\060\uffca\062\uffca" +
    "\063\uffca\071\uffca\072\uffca\101\uffca\001\002\000\056\003" +
    "\uffce\013\uffce\014\uffce\025\uffce\026\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\052\uffce\053" +
    "\uffce\054\uffce\057\uffce\060\uffce\062\uffce\063\uffce\071\uffce" +
    "\072\uffce\101\uffce\001\002\000\034\013\102\014\050\025" +
    "\042\026\106\040\064\041\073\042\071\043\061\044\057" +
    "\045\066\046\076\071\103\072\074\001\002\000\040\004" +
    "\115\005\116\006\112\010\117\011\120\012\124\015\122" +
    "\016\126\017\121\020\113\021\125\022\114\023\123\024" +
    "\127\047\226\001\002\000\004\052\040\001\002\000\062" +
    "\003\uffcb\013\uffcb\014\uffcb\025\uffcb\026\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062" +
    "\uffcb\063\uffcb\071\uffcb\072\uffcb\101\uffcb\001\002\000\050" +
    "\004\uffb3\005\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\047\uffb3\051\uffb3\053\uffb3\073\uffb3\075\uffb3\001" +
    "\002\000\052\004\uffb4\005\uffb4\006\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\047\uffb4\050\146\051\uffb4\053\uffb4" +
    "\073\uffb4\075\uffb4\001\002\000\040\004\115\005\116\006" +
    "\112\010\117\011\120\012\124\015\122\016\126\017\121" +
    "\020\113\021\125\022\114\023\123\024\127\073\uffe6\001" +
    "\002\000\056\003\uffe4\013\uffe4\014\uffe4\025\uffe4\026\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\057\uffe4\060\uffe4\062\uffe4" +
    "\063\uffe4\071\uffe4\072\uffe4\101\uffe4\001\002\000\004\026" +
    "\236\001\002\000\006\073\uffc8\074\241\001\002\000\010" +
    "\050\146\073\uffc9\074\237\001\002\000\034\013\102\014" +
    "\050\025\042\026\106\040\064\041\073\042\071\043\061" +
    "\044\057\045\066\046\076\071\103\072\074\001\002\000" +
    "\040\004\115\005\116\006\112\010\117\011\120\012\124" +
    "\015\122\016\126\017\121\020\113\021\125\022\114\023" +
    "\123\024\127\073\uffc7\001\002\000\004\052\243\001\002" +
    "\000\004\073\uffc6\001\002\000\034\013\102\014\050\025" +
    "\042\026\106\040\064\041\073\042\071\043\061\044\057" +
    "\045\066\046\076\071\103\072\074\001\002\000\006\053" +
    "\245\075\153\001\002\000\004\073\uffd4\001\002\000\050" +
    "\004\uffa9\005\uffa9\006\uffa9\010\uffa9\011\uffa9\012\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\047\uffa9\051\uffa9\053\uffa9\073\uffa9\075\uffa9\001" +
    "\002\000\006\026\252\101\044\001\002\000\004\074\206" +
    "\001\002\000\004\073\253\001\002\000\006\050\146\074" +
    "\203\001\002\000\034\013\102\014\050\025\042\026\106" +
    "\040\064\041\073\042\071\043\061\044\057\045\066\046" +
    "\076\071\103\072\074\001\002\000\040\004\115\005\116" +
    "\006\112\010\117\011\120\012\124\015\122\016\126\017" +
    "\121\020\113\021\125\022\114\023\123\024\127\073\255" +
    "\001\002\000\034\013\102\014\050\025\042\026\106\040" +
    "\064\041\073\042\071\043\061\044\057\045\066\046\076" +
    "\071\103\072\074\001\002\000\040\004\115\005\116\006" +
    "\112\010\117\011\120\012\124\015\122\016\126\017\121" +
    "\020\113\021\125\022\114\023\123\024\127\047\257\001" +
    "\002\000\004\052\040\001\002\000\056\003\uffd2\013\uffd2" +
    "\014\uffd2\025\uffd2\026\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\057\uffd2\060\uffd2\062\uffd2\063\uffd2\071\uffd2\072\uffd2\101" +
    "\uffd2\001\002\000\004\052\040\001\002\000\010\002\uffef" +
    "\003\uffef\100\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\012\002\005\006\010\007\007\010\004\001" +
    "\001\000\004\010\260\001\001\000\004\011\036\001\001" +
    "\000\002\001\001\000\004\003\020\001\001\000\002\001" +
    "\001\000\006\007\011\010\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\023\012\025\013" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\023\013\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\042\011\077\014\074\015\100" +
    "\016\076\017\054\020\052\022\044\023\066\024\061\025" +
    "\045\026\053\027\067\030\064\031\050\001\001\000\002" +
    "\001\001\000\020\004\042\017\245\020\106\022\044\023" +
    "\066\024\061\026\053\001\001\000\002\001\001\000\004" +
    "\003\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\042\017\231\020\106\022\044\023\066\024\061" +
    "\026\053\001\001\000\004\020\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\042\011\077\014\074\015\165\016\076" +
    "\017\054\020\052\022\044\023\066\024\061\025\045\026" +
    "\053\027\067\030\064\031\050\001\001\000\020\004\042" +
    "\017\163\020\106\022\044\023\066\024\061\026\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\157\001\001\000\002\001\001\000\022\004" +
    "\042\005\104\017\107\020\106\022\044\023\066\024\061" +
    "\026\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\042\017\144\020\106\022\044\023\066\024\061\026" +
    "\053\001\001\000\020\004\042\017\143\020\106\022\044" +
    "\023\066\024\061\026\053\001\001\000\020\004\042\017" +
    "\142\020\106\022\044\023\066\024\061\026\053\001\001" +
    "\000\020\004\042\017\141\020\106\022\044\023\066\024" +
    "\061\026\053\001\001\000\020\004\042\017\140\020\106" +
    "\022\044\023\066\024\061\026\053\001\001\000\020\004" +
    "\042\017\137\020\106\022\044\023\066\024\061\026\053" +
    "\001\001\000\020\004\042\017\136\020\106\022\044\023" +
    "\066\024\061\026\053\001\001\000\020\004\042\017\135" +
    "\020\106\022\044\023\066\024\061\026\053\001\001\000" +
    "\020\004\042\017\134\020\106\022\044\023\066\024\061" +
    "\026\053\001\001\000\020\004\042\017\133\020\106\022" +
    "\044\023\066\024\061\026\053\001\001\000\020\004\042" +
    "\017\132\020\106\022\044\023\066\024\061\026\053\001" +
    "\001\000\020\004\042\017\131\020\106\022\044\023\066" +
    "\024\061\026\053\001\001\000\020\004\042\017\130\020" +
    "\106\022\044\023\066\024\061\026\053\001\001\000\020" +
    "\004\042\017\127\020\106\022\044\023\066\024\061\026" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\042\017\154" +
    "\020\106\022\044\023\066\024\061\026\053\001\001\000" +
    "\022\004\042\005\147\017\107\020\106\022\044\023\066" +
    "\024\061\026\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\042\017\153\020\106" +
    "\022\044\023\066\024\061\026\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\042\005\167\017\107\020\106\022" +
    "\044\023\066\024\061\026\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\042\017\177\020\106\022\044\023\066\024\061\026" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\042\017\203\020\106\022\044\023" +
    "\066\024\061\026\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\042\017\206\020\106\022\044\023" +
    "\066\024\061\026\053\001\001\000\002\001\001\000\020" +
    "\004\042\017\210\020\106\022\044\023\066\024\061\026" +
    "\053\001\001\000\002\001\001\000\004\011\212\001\001" +
    "\000\010\032\214\033\217\034\216\001\001\000\002\001" +
    "\001\000\004\034\222\001\001\000\004\011\221\001\001" +
    "\000\002\001\001\000\006\032\220\033\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\042\017\224\020\106\022\044\023\066\024\061\026" +
    "\053\001\001\000\002\001\001\000\004\011\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\042\017" +
    "\237\020\106\022\044\023\066\024\061\026\053\001\001" +
    "\000\002\001\001\000\004\021\241\001\001\000\002\001" +
    "\001\000\022\004\042\005\243\017\107\020\106\022\044" +
    "\023\066\024\061\026\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\250\020\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\042\017\253\020\106\022\044\023\066" +
    "\024\061\026\053\001\001\000\002\001\001\000\020\004" +
    "\042\017\255\020\106\022\044\023\066\024\061\026\053" +
    "\001\001\000\002\001\001\000\004\011\257\001\001\000" +
    "\002\001\001\000\004\011\261\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  Lexer lex;

  /**
  * Constructor de la clase parser
  * entrada: un lexer
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: inicializar el lexer y el symbolFactory
  */
  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }
  /**
  * Sobreescritura de métodos para el manejo de errores
  * entrada: un entero y un símbolo
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola el error
  */
  public void syntax_error(Symbol token) {
    if (token.value == null){
      return;
    }
    System.out.println("Error de sintaxis en la linea " + token.left + " columna " + token.right + ": " + token.value);
  }
  public void unrecovered_syntax_error(Symbol token) {
    System.out.println("Error de sintaxis encontrado. Continuando...");
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  /** 
  * funciones públicas de pruebas para el lexer, por ahora
  * solo imprimen en consola
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola
  */
  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios");
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= funciones_bolsa_navidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // t_santa ::= t_int_colacho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // t_santa ::= t_float_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t_santa ::= t_bool_noel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t_santa ::= t_char_pascuero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_santa ::= t_string_kris 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // l_santa ::= l_int_colacho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_santa ::= l_float_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_santa ::= l_t_noel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_santa ::= l_f_noel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_santa ::= l_char_pascuero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_santa ::= l_string_kris 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // args_santa ::= expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // args_santa ::= args_santa sep_regalo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones_bolsa_navidena ::= funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones_bolsa_navidena ::= funciones_bolsa_navidena funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_ayudante_santa ::= def_funcion_trineo bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_ayudante_santa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_ayudante_santa ::= error def_funcion_trineo bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_ayudante_santa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_funcion_trineo ::= function_chimenea main_navidad p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento parametros_funcion_renos p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_funcion_renos ::= parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros_funcion_renos ::= parametros_funcion_renos sep_regalo parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametro_funcion_reno ::= t_santa id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_reno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elemento_arreglo_juguete ::= id_persona p_abre_empaque expresion_regalo p_cierra_empaque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento_arreglo_juguete",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_codigo_casa_jengibre ::= cb_abre_regalo lineas_hombre_jengibre cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_casa_jengibre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // retorno_carta_santa ::= return_envia expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno_carta_santa",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // linea_hombre_jengibre ::= asignacion_adorno fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linea_hombre_jengibre ::= retorno_carta_santa fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // linea_hombre_jengibre ::= expresion_regalo fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea_hombre_jengibre ::= break_corta fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linea_hombre_jengibre ::= do_until_fabrica_juguetes fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_hombre_jengibre ::= for_vispera 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // linea_hombre_jengibre ::= bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_hombre_jengibre ::= if_travieso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_hombre_jengibre ::= error fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // llamada_func_pino ::= id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // llamada_func_pino ::= id_persona p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // llamada_func_pino ::= print_habla p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // llamada_func_pino ::= print_habla p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada_func_pino ::= read_escucha p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada_func_pino ::= read_escucha p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lineas_hombre_jengibre ::= linea_hombre_jengibre lineas_hombre_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lineas_hombre_jengibre ::= linea_hombre_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l_arr_gordo ::= cb_abre_regalo args_santa cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_arr_gordo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // do_until_fabrica_juguetes ::= do_hace bloque_codigo_casa_jengibre until_revisa p_abre_cuento expresion_regalo p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until_fabrica_juguetes",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_vispera ::= for_envuelve p_abre_cuento asignacion_adorno fin_regalo expresion_regalo fin_regalo expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_vispera",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre else_inocente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista else_inocente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elif_ayudante_lista ::= elif_lista_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_ayudante_lista",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elif_ayudante_lista ::= elif_lista_santa elif_ayudante_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_ayudante_lista",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elif_lista_santa ::= elif_hada p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_lista_santa",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_inocente ::= else_duende bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_inocente",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion_adorno ::= local_dulce t_santa id_persona 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Declaración de variable: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion_adorno ::= local_dulce t_santa elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion_adorno ::= local_dulce t_santa id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion_adorno ::= local_dulce t_santa elemento_arreglo_juguete assign_entregar l_arr_gordo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion_adorno ::= id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion_adorno ::= elemento_arreglo_juguete assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_regalo ::= l_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_regalo ::= id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_regalo ::= elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_regalo ::= p_abre_cuento expresion_regalo p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_regalo ::= expr_ar_regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_regalo ::= expr_rel_regalocomprado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_regalo ::= expr_log_regalomanual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_regalo ::= llamada_func_pino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_ar_regaloprin ::= expresion_regalo op_res_rodolfo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_ar_regaloprin ::= expresion_regalo op_sum_cupido expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_ar_regaloprin ::= expresion_regalo op_div_bailarin expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_ar_regaloprin ::= expresion_regalo op_mul_cometa expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_ar_regaloprin ::= expresion_regalo op_mod_rayo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_ar_regaloprin ::= expresion_regalo op_pow_travieso expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_ar_regaloprin ::= op_inc_quien id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_ar_regaloprin ::= op_dec_grinch id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_ar_regaloprin ::= op_dec_grinch elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_ar_regaloprin ::= op_inc_quien elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_rel_regalocomprado ::= expresion_regalo op_eq_astuto expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_rel_regalocomprado ::= expresion_regalo op_l_nevado expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_rel_regalocomprado ::= expresion_regalo op_g_alegre expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_rel_regalocomprado ::= expresion_regalo op_geq_feliz expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_rel_regalocomprado ::= expresion_regalo op_leq_copito expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_rel_regalocomprado ::= expresion_regalo op_neq_chispa expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_log_regalomanual ::= expresion_regalo op_and_melchor expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_log_regalomanual ::= expresion_regalo op_or_gaspar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_log_regalomanual ::= op_not_baltasar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
