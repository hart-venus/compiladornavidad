
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wanderariel;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\005\000\002\006" +
    "\003\000\002\006\004\000\002\007\004\000\002\007\005" +
    "\000\002\010\007\000\002\010\007\000\002\036\002\000" +
    "\002\010\011\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\020\006\000\002\011\005\000\002\011" +
    "\005\000\002\026\004\000\002\026\003\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\004\000\002\027\005\000\002\027" +
    "\006\000\002\027\006\000\002\027\005\000\002\027\006" +
    "\000\002\027\006\000\002\015\003\000\002\015\004\000" +
    "\002\021\005\000\002\030\010\000\002\031\013\000\002" +
    "\032\007\000\002\032\010\000\002\032\010\000\002\032" +
    "\011\000\002\033\003\000\002\033\004\000\002\034\007" +
    "\000\002\035\004\000\002\016\005\000\002\016\010\000" +
    "\002\016\007\000\002\016\012\000\002\016\003\000\002" +
    "\022\005\000\002\022\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\003\004\067\007\001\002\000\004\067" +
    "\007\001\002\000\004\046\042\001\002\000\004\002\040" +
    "\001\002\000\014\026\017\027\013\030\015\031\016\032" +
    "\014\001\002\000\010\002\ufff2\003\ufff2\067\ufff2\001\002" +
    "\000\010\002\000\003\004\067\007\001\002\000\010\002" +
    "\ufff1\003\ufff1\067\ufff1\001\002\000\004\025\ufffe\001\002" +
    "\000\004\025\ufffb\001\002\000\004\025\ufffd\001\002\000" +
    "\004\025\ufffc\001\002\000\006\025\uffff\065\035\001\002" +
    "\000\004\025\021\001\002\000\004\042\022\001\002\000" +
    "\016\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\043\024" +
    "\001\002\000\014\026\026\027\013\030\015\031\016\032" +
    "\014\001\002\000\004\046\uffed\001\002\000\006\043\uffea" +
    "\064\uffea\001\002\000\004\025\uffff\001\002\000\004\025" +
    "\034\001\002\000\006\043\031\064\032\001\002\000\004" +
    "\046\uffeb\001\002\000\014\026\026\027\013\030\015\031" +
    "\016\032\014\001\002\000\006\043\uffe9\064\uffe9\001\002" +
    "\000\006\043\uffe8\064\uffe8\001\002\000\004\042\036\001" +
    "\002\000\004\043\037\001\002\000\004\046\uffee\001\002" +
    "\000\004\002\001\001\002\000\010\002\ufff0\003\ufff0\067" +
    "\ufff0\001\002\000\054\003\063\012\105\013\052\024\044" +
    "\025\061\034\067\035\076\036\074\037\064\040\062\041" +
    "\071\042\101\046\042\050\055\053\043\054\066\056\051" +
    "\057\075\060\106\061\077\070\046\001\002\000\004\042" +
    "\257\001\002\000\034\012\105\013\052\024\044\025\111" +
    "\034\067\035\076\036\074\037\064\040\062\041\071\042" +
    "\101\060\106\061\077\001\002\000\050\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\043\uffbf" +
    "\045\uffbf\047\uffbf\062\uffbf\064\uffbf\001\002\000\014\026" +
    "\026\027\013\030\015\031\016\032\014\001\002\000\050" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\043\uffbb\045\uffbb\047\uffbb\062\uffbb\064\uffbb\001" +
    "\002\000\004\062\241\001\002\000\036\012\105\013\052" +
    "\024\044\025\111\034\067\035\076\036\074\037\064\040" +
    "\062\041\071\042\101\060\106\061\077\062\uffe3\001\002" +
    "\000\004\025\237\001\002\000\004\062\uffc2\001\002\000" +
    "\056\003\uffdb\012\uffdb\013\uffdb\024\uffdb\025\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\053\uffdb\054\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\070\uffdb\001\002\000\004\042\216\001" +
    "\002\000\042\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\062\uffbd\063\214\001\002\000\050" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\043\uffb8\045\uffb8\047\uffb8\062\uffb8\064\uffb8\001" +
    "\002\000\040\004\120\005\121\006\115\007\123\010\122" +
    "\011\127\014\125\015\131\016\124\017\116\020\130\021" +
    "\117\022\126\023\132\062\213\001\002\000\046\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\042\152\044\151\062\uffbe\063\211\001\002\000\050\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\043\ufff6\045\ufff6\047\ufff6\062\ufff6\064\ufff6\001\002" +
    "\000\006\047\210\062\170\001\002\000\050\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\043" +
    "\ufff7\045\ufff7\047\ufff7\062\ufff7\064\ufff7\001\002\000\050" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\043\uffb9\045\uffb9\047\uffb9\062\uffb9\064\uffb9\001" +
    "\002\000\004\046\042\001\002\000\050\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\043\ufffa" +
    "\045\ufffa\047\ufffa\062\ufffa\064\ufffa\001\002\000\056\003" +
    "\uffdd\012\uffdd\013\uffdd\024\uffdd\025\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\053\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\070\uffdd\001\002\000\050\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\043\ufff5\045" +
    "\ufff5\047\ufff5\062\ufff5\064\ufff5\001\002\000\050\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\043\uffba\045\uffba\047\uffba\062\uffba\064\uffba\001\002\000" +
    "\004\062\202\001\002\000\050\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\043\ufff8\045\ufff8" +
    "\047\ufff8\062\ufff8\064\ufff8\001\002\000\004\062\201\001" +
    "\002\000\050\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\043\ufff9\045\ufff9\047\ufff9\062\ufff9" +
    "\064\ufff9\001\002\000\004\042\174\001\002\000\056\003" +
    "\uffd3\012\uffd3\013\uffd3\024\uffd3\025\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\053\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\070\uffd3\001\002\000\034\012\105\013\052\024" +
    "\044\025\111\034\067\035\076\036\074\037\064\040\062" +
    "\041\071\042\101\060\106\061\077\001\002\000\004\062" +
    "\171\001\002\000\056\003\uffdc\012\uffdc\013\uffdc\024\uffdc" +
    "\025\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\046\uffdc\047\uffdc\050\uffdc\053\uffdc\054\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\070\uffdc\001\002\000" +
    "\056\003\166\012\105\013\052\024\044\025\061\034\067" +
    "\035\076\036\074\037\064\040\062\041\071\042\101\046" +
    "\042\047\165\050\055\053\043\054\066\056\051\057\075" +
    "\060\106\061\077\070\046\001\002\000\004\025\164\001" +
    "\002\000\004\042\107\001\002\000\036\012\105\013\052" +
    "\024\044\025\111\034\067\035\076\036\074\037\064\040" +
    "\062\041\071\042\101\043\114\060\106\061\077\001\002" +
    "\000\006\043\162\064\156\001\002\000\054\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\042" +
    "\152\043\uffbe\044\151\045\uffbe\047\uffbe\062\uffbe\064\uffbe" +
    "\001\002\000\050\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\043\uffbd\045\uffbd\047\uffbd\062" +
    "\uffbd\064\uffbd\001\002\000\044\004\120\005\121\006\115" +
    "\007\123\010\122\011\127\014\125\015\131\016\124\017" +
    "\116\020\130\021\117\022\126\023\132\043\ufff4\047\ufff4" +
    "\064\ufff4\001\002\000\050\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\043\uffd6\045\uffd6\047" +
    "\uffd6\062\uffd6\064\uffd6\001\002\000\034\012\105\013\052" +
    "\024\044\025\111\034\067\035\076\036\074\037\064\040" +
    "\062\041\071\042\101\060\106\061\077\001\002\000\034" +
    "\012\105\013\052\024\044\025\111\034\067\035\076\036" +
    "\074\037\064\040\062\041\071\042\101\060\106\061\077" +
    "\001\002\000\034\012\105\013\052\024\044\025\111\034" +
    "\067\035\076\036\074\037\064\040\062\041\071\042\101" +
    "\060\106\061\077\001\002\000\034\012\105\013\052\024" +
    "\044\025\111\034\067\035\076\036\074\037\064\040\062" +
    "\041\071\042\101\060\106\061\077\001\002\000\034\012" +
    "\105\013\052\024\044\025\111\034\067\035\076\036\074" +
    "\037\064\040\062\041\071\042\101\060\106\061\077\001" +
    "\002\000\034\012\105\013\052\024\044\025\111\034\067" +
    "\035\076\036\074\037\064\040\062\041\071\042\101\060" +
    "\106\061\077\001\002\000\034\012\105\013\052\024\044" +
    "\025\111\034\067\035\076\036\074\037\064\040\062\041" +
    "\071\042\101\060\106\061\077\001\002\000\034\012\105" +
    "\013\052\024\044\025\111\034\067\035\076\036\074\037" +
    "\064\040\062\041\071\042\101\060\106\061\077\001\002" +
    "\000\034\012\105\013\052\024\044\025\111\034\067\035" +
    "\076\036\074\037\064\040\062\041\071\042\101\060\106" +
    "\061\077\001\002\000\034\012\105\013\052\024\044\025" +
    "\111\034\067\035\076\036\074\037\064\040\062\041\071" +
    "\042\101\060\106\061\077\001\002\000\034\012\105\013" +
    "\052\024\044\025\111\034\067\035\076\036\074\037\064" +
    "\040\062\041\071\042\101\060\106\061\077\001\002\000" +
    "\034\012\105\013\052\024\044\025\111\034\067\035\076" +
    "\036\074\037\064\040\062\041\071\042\101\060\106\061" +
    "\077\001\002\000\034\012\105\013\052\024\044\025\111" +
    "\034\067\035\076\036\074\037\064\040\062\041\071\042" +
    "\101\060\106\061\077\001\002\000\034\012\105\013\052" +
    "\024\044\025\111\034\067\035\076\036\074\037\064\040" +
    "\062\041\071\042\101\060\106\061\077\001\002\000\050" +
    "\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\043\uffa6\045\uffa6\047\uffa6\062\uffa6\064\uffa6\001" +
    "\002\000\050\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\130\021" +
    "\117\022\126\023\132\043\uffac\045\uffac\047\uffac\062\uffac" +
    "\064\uffac\001\002\000\050\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\126\023\132\043\uffa9\045\uffa9\047" +
    "\uffa9\062\uffa9\064\uffa9\001\002\000\050\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\014\125\015\131\016" +
    "\124\017\116\020\130\021\117\022\126\023\132\043\uffb2" +
    "\045\uffb2\047\uffb2\062\uffb2\064\uffb2\001\002\000\050\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\132\043\uffa7\045\uffa7\047\uffa7\062\uffa7\064\uffa7\001\002" +
    "\000\050\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\130\021\117" +
    "\022\126\023\132\043\uffad\045\uffad\047\uffad\062\uffad\064" +
    "\uffad\001\002\000\050\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\130\021\117\022\126\023\132\043\uffab\045\uffab\047\uffab" +
    "\062\uffab\064\uffab\001\002\000\050\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\122\011\127\014\125\015\131\016\124" +
    "\017\116\020\130\021\117\022\126\023\132\043\uffb4\045" +
    "\uffb4\047\uffb4\062\uffb4\064\uffb4\001\002\000\050\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\014\125\015" +
    "\131\016\124\017\116\020\130\021\117\022\126\023\132" +
    "\043\uffb3\045\uffb3\047\uffb3\062\uffb3\064\uffb3\001\002\000" +
    "\050\004\uffb6\005\uffb6\006\115\007\123\010\122\011\127" +
    "\014\125\015\131\016\124\017\116\020\130\021\117\022" +
    "\126\023\132\043\uffb6\045\uffb6\047\uffb6\062\uffb6\064\uffb6" +
    "\001\002\000\050\004\uffb7\005\uffb7\006\115\007\123\010" +
    "\122\011\127\014\125\015\131\016\124\017\116\020\130" +
    "\021\117\022\126\023\132\043\uffb7\045\uffb7\047\uffb7\062" +
    "\uffb7\064\uffb7\001\002\000\050\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\126\023\132\043\uffa8\045\uffa8" +
    "\047\uffa8\062\uffa8\064\uffa8\001\002\000\050\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\130\021\117\022\126\023\132\043" +
    "\uffaa\045\uffaa\047\uffaa\062\uffaa\064\uffaa\001\002\000\050" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\122\011\127\014" +
    "\125\015\131\016\124\017\116\020\130\021\117\022\126" +
    "\023\132\043\uffb5\045\uffb5\047\uffb5\062\uffb5\064\uffb5\001" +
    "\002\000\034\012\105\013\052\024\044\025\111\034\067" +
    "\035\076\036\074\037\064\040\062\041\071\042\101\060" +
    "\106\061\077\001\002\000\036\012\105\013\052\024\044" +
    "\025\111\034\067\035\076\036\074\037\064\040\062\041" +
    "\071\042\101\043\154\060\106\061\077\001\002\000\006" +
    "\043\155\064\156\001\002\000\050\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\043\uffd9\045" +
    "\uffd9\047\uffd9\062\uffd9\064\uffd9\001\002\000\050\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\043\uffd8\045\uffd8\047\uffd8\062\uffd8\064\uffd8\001\002\000" +
    "\034\012\105\013\052\024\044\025\111\034\067\035\076" +
    "\036\074\037\064\040\062\041\071\042\101\060\106\061" +
    "\077\001\002\000\044\004\120\005\121\006\115\007\123" +
    "\010\122\011\127\014\125\015\131\016\124\017\116\020" +
    "\130\021\117\022\126\023\132\043\ufff3\047\ufff3\064\ufff3" +
    "\001\002\000\040\004\120\005\121\006\115\007\123\010" +
    "\122\011\127\014\125\015\131\016\124\017\116\020\130" +
    "\021\117\022\126\023\132\045\161\001\002\000\052\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\043\uffe7\045\uffe7\047\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\001\002\000\050\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\043\uffd7\045\uffd7\047\uffd7\062" +
    "\uffd7\064\uffd7\001\002\000\050\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\043\uffae\045\uffae" +
    "\047\uffae\062\uffae\064\uffae\001\002\000\052\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\043" +
    "\uffb1\044\151\045\uffb1\047\uffb1\062\uffb1\064\uffb1\001\002" +
    "\000\070\002\uffe6\003\uffe6\012\uffe6\013\uffe6\024\uffe6\025" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\067\uffe6\070\uffe6\001\002\000\004\062\170\001\002\000" +
    "\056\003\uffd2\012\uffd2\013\uffd2\024\uffd2\025\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\053\uffd2\054\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\070\uffd2\001\002\000\056\003\uffda\012" +
    "\uffda\013\uffda\024\uffda\025\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\046\uffda\047\uffda\050" +
    "\uffda\053\uffda\054\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\070\uffda\001\002\000\056\003\uffe2\012\uffe2\013\uffe2\024" +
    "\uffe2\025\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2\054" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\070\uffe2\001\002" +
    "\000\040\004\120\005\121\006\115\007\123\010\122\011" +
    "\127\014\125\015\131\016\124\017\116\020\130\021\117" +
    "\022\126\023\132\043\173\001\002\000\050\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\043" +
    "\uffbc\045\uffbc\047\uffbc\062\uffbc\064\uffbc\001\002\000\004" +
    "\025\176\001\002\000\004\043\200\001\002\000\006\043" +
    "\177\044\151\001\002\000\050\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\043\uffd5\045\uffd5" +
    "\047\uffd5\062\uffd5\064\uffd5\001\002\000\050\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\043" +
    "\uffd4\045\uffd4\047\uffd4\062\uffd4\064\uffd4\001\002\000\056" +
    "\003\uffdf\012\uffdf\013\uffdf\024\uffdf\025\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\053\uffdf\054\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\070\uffdf\001\002\000\056\003\uffde\012\uffde" +
    "\013\uffde\024\uffde\025\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\046\uffde\047\uffde\050\uffde" +
    "\053\uffde\054\uffde\056\uffde\057\uffde\060\uffde\061\uffde\070" +
    "\uffde\001\002\000\004\055\204\001\002\000\004\042\205" +
    "\001\002\000\034\012\105\013\052\024\044\025\111\034" +
    "\067\035\076\036\074\037\064\040\062\041\071\042\101" +
    "\060\106\061\077\001\002\000\040\004\120\005\121\006" +
    "\115\007\123\010\122\011\127\014\125\015\131\016\124" +
    "\017\116\020\130\021\117\022\126\023\132\043\207\001" +
    "\002\000\004\062\uffd0\001\002\000\070\002\uffe5\003\uffe5" +
    "\012\uffe5\013\uffe5\024\uffe5\025\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\067\uffe5\070\uffe5\001\002" +
    "\000\034\012\105\013\052\024\044\025\111\034\067\035" +
    "\076\036\074\037\064\040\062\041\071\042\101\060\106" +
    "\061\077\001\002\000\040\004\120\005\121\006\115\007" +
    "\123\010\122\011\127\014\125\015\131\016\124\017\116" +
    "\020\130\021\117\022\126\023\132\062\uffc1\001\002\000" +
    "\056\003\uffe0\012\uffe0\013\uffe0\024\uffe0\025\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\070\uffe0\001\002\000\034\012\105\013" +
    "\052\024\044\025\111\034\067\035\076\036\074\037\064" +
    "\040\062\041\071\042\101\060\106\061\077\001\002\000" +
    "\040\004\120\005\121\006\115\007\123\010\122\011\127" +
    "\014\125\015\131\016\124\017\116\020\130\021\117\022" +
    "\126\023\132\062\uffc0\001\002\000\034\012\105\013\052" +
    "\024\044\025\111\034\067\035\076\036\074\037\064\040" +
    "\062\041\071\042\101\060\106\061\077\001\002\000\040" +
    "\004\120\005\121\006\115\007\123\010\122\011\127\014" +
    "\125\015\131\016\124\017\116\020\130\021\117\022\126" +
    "\023\132\043\220\001\002\000\004\046\042\001\002\000" +
    "\062\003\uffce\012\uffce\013\uffce\024\uffce\025\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\222\052\224\053\uffce\054\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\070\uffce\001\002\000" +
    "\004\042\232\001\002\000\062\003\uffcd\012\uffcd\013\uffcd" +
    "\024\uffcd\025\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\046\uffcd\047\uffcd\050\uffcd\051\222" +
    "\052\224\053\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\070\uffcd\001\002\000\004\046\042\001\002\000\056" +
    "\003\uffcc\012\uffcc\013\uffcc\024\uffcc\025\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\053\uffcc\054\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\070\uffcc\001\002\000\062\003\uffca\012\uffca" +
    "\013\uffca\024\uffca\025\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\070\uffca\001\002\000\056\003\uffc7\012\uffc7" +
    "\013\uffc7\024\uffc7\025\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\053\uffc7\054\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\070" +
    "\uffc7\001\002\000\056\003\uffcb\012\uffcb\013\uffcb\024\uffcb" +
    "\025\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\046\uffcb\047\uffcb\050\uffcb\053\uffcb\054\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\070\uffcb\001\002\000" +
    "\062\003\uffc9\012\uffc9\013\uffc9\024\uffc9\025\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\070\uffc9\001\002\000" +
    "\034\012\105\013\052\024\044\025\111\034\067\035\076" +
    "\036\074\037\064\040\062\041\071\042\101\060\106\061" +
    "\077\001\002\000\040\004\120\005\121\006\115\007\123" +
    "\010\122\011\127\014\125\015\131\016\124\017\116\020" +
    "\130\021\117\022\126\023\132\043\234\001\002\000\004" +
    "\046\042\001\002\000\062\003\uffc8\012\uffc8\013\uffc8\024" +
    "\uffc8\025\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\070\uffc8\001\002\000\050\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\043\uffaf\045\uffaf\047" +
    "\uffaf\062\uffaf\064\uffaf\001\002\000\052\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\043\uffb0" +
    "\044\151\045\uffb0\047\uffb0\062\uffb0\064\uffb0\001\002\000" +
    "\040\004\120\005\121\006\115\007\123\010\122\011\127" +
    "\014\125\015\131\016\124\017\116\020\130\021\117\022" +
    "\126\023\132\062\uffe4\001\002\000\056\003\uffe1\012\uffe1" +
    "\013\uffe1\024\uffe1\025\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\053\uffe1\054\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\070" +
    "\uffe1\001\002\000\004\025\243\001\002\000\010\044\244" +
    "\062\uffc6\063\245\001\002\000\004\034\247\001\002\000" +
    "\034\012\105\013\052\024\044\025\111\034\067\035\076" +
    "\036\074\037\064\040\062\041\071\042\101\060\106\061" +
    "\077\001\002\000\040\004\120\005\121\006\115\007\123" +
    "\010\122\011\127\014\125\015\131\016\124\017\116\020" +
    "\130\021\117\022\126\023\132\062\uffc4\001\002\000\004" +
    "\045\250\001\002\000\006\062\uffc5\063\251\001\002\000" +
    "\004\046\253\001\002\000\004\062\uffc3\001\002\000\034" +
    "\012\105\013\052\024\044\025\111\034\067\035\076\036" +
    "\074\037\064\040\062\041\071\042\101\060\106\061\077" +
    "\001\002\000\006\047\255\064\156\001\002\000\004\062" +
    "\uffd1\001\002\000\050\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\043\uffa5\045\uffa5\047\uffa5" +
    "\062\uffa5\064\uffa5\001\002\000\004\025\262\001\002\000" +
    "\004\063\214\001\002\000\004\062\263\001\002\000\006" +
    "\044\151\063\211\001\002\000\034\012\105\013\052\024" +
    "\044\025\111\034\067\035\076\036\074\037\064\040\062" +
    "\041\071\042\101\060\106\061\077\001\002\000\040\004" +
    "\120\005\121\006\115\007\123\010\122\011\127\014\125" +
    "\015\131\016\124\017\116\020\130\021\117\022\126\023" +
    "\132\062\265\001\002\000\034\012\105\013\052\024\044" +
    "\025\111\034\067\035\076\036\074\037\064\040\062\041" +
    "\071\042\101\060\106\061\077\001\002\000\040\004\120" +
    "\005\121\006\115\007\123\010\122\011\127\014\125\015" +
    "\131\016\124\017\116\020\130\021\117\022\126\023\132" +
    "\043\267\001\002\000\004\046\042\001\002\000\056\003" +
    "\uffcf\012\uffcf\013\uffcf\024\uffcf\025\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\070\uffcf\001\002\000\004\046\042\001\002\000" +
    "\010\002\uffef\003\uffef\067\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\012\002\005\006\010\007\007\010\004\001" +
    "\001\000\004\010\270\001\001\000\004\011\040\001\001" +
    "\000\002\001\001\000\004\003\017\001\001\000\002\001" +
    "\001\000\006\007\011\010\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\022\001\001\000\010\003\026\012" +
    "\027\013\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\026\013\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\044\011\102\014\077\015\103\016\101\017" +
    "\057\020\055\022\052\023\046\024\071\025\064\026\047" +
    "\027\056\030\072\031\067\032\053\001\001\000\002\001" +
    "\001\000\020\004\044\017\255\020\111\023\046\024\071" +
    "\025\064\027\056\001\001\000\002\001\001\000\004\003" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\044\017\237\020\111\023\046\024\071\025\064\027" +
    "\056\001\001\000\004\020\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\044\017" +
    "\171\020\111\023\046\024\071\025\064\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\044\011" +
    "\102\014\166\016\101\017\057\020\055\022\052\023\046" +
    "\024\071\025\064\026\047\027\056\030\072\031\067\032" +
    "\053\001\001\000\004\020\162\001\001\000\002\001\001" +
    "\000\022\004\044\005\107\017\112\020\111\023\046\024" +
    "\071\025\064\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\044\017\147\020\111\023\046\024\071" +
    "\025\064\027\056\001\001\000\020\004\044\017\146\020" +
    "\111\023\046\024\071\025\064\027\056\001\001\000\020" +
    "\004\044\017\145\020\111\023\046\024\071\025\064\027" +
    "\056\001\001\000\020\004\044\017\144\020\111\023\046" +
    "\024\071\025\064\027\056\001\001\000\020\004\044\017" +
    "\143\020\111\023\046\024\071\025\064\027\056\001\001" +
    "\000\020\004\044\017\142\020\111\023\046\024\071\025" +
    "\064\027\056\001\001\000\020\004\044\017\141\020\111" +
    "\023\046\024\071\025\064\027\056\001\001\000\020\004" +
    "\044\017\140\020\111\023\046\024\071\025\064\027\056" +
    "\001\001\000\020\004\044\017\137\020\111\023\046\024" +
    "\071\025\064\027\056\001\001\000\020\004\044\017\136" +
    "\020\111\023\046\024\071\025\064\027\056\001\001\000" +
    "\020\004\044\017\135\020\111\023\046\024\071\025\064" +
    "\027\056\001\001\000\020\004\044\017\134\020\111\023" +
    "\046\024\071\025\064\027\056\001\001\000\020\004\044" +
    "\017\133\020\111\023\046\024\071\025\064\027\056\001" +
    "\001\000\020\004\044\017\132\020\111\023\046\024\071" +
    "\025\064\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\044\017\157\020\111\023\046\024\071\025\064\027\056" +
    "\001\001\000\022\004\044\005\152\017\112\020\111\023" +
    "\046\024\071\025\064\027\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\044\017" +
    "\156\020\111\023\046\024\071\025\064\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\044\017\205\020\111\023\046\024\071\025\064" +
    "\027\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\044\017\211\020\111\023\046" +
    "\024\071\025\064\027\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\044\017\214\020\111\023\046" +
    "\024\071\025\064\027\056\001\001\000\002\001\001\000" +
    "\020\004\044\017\216\020\111\023\046\024\071\025\064" +
    "\027\056\001\001\000\002\001\001\000\004\011\220\001" +
    "\001\000\010\033\222\034\225\035\224\001\001\000\002" +
    "\001\001\000\006\034\230\035\227\001\001\000\004\011" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\044\017\232\020\111\023\046\024\071\025\064\027\056" +
    "\001\001\000\002\001\001\000\004\011\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\044\017\245\020\111" +
    "\023\046\024\071\025\064\027\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\251" +
    "\001\001\000\002\001\001\000\022\004\044\005\253\017" +
    "\112\020\111\023\046\024\071\025\064\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\257\022\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\044\017\263\020" +
    "\111\023\046\024\071\025\064\027\056\001\001\000\002" +
    "\001\001\000\020\004\044\017\265\020\111\023\046\024" +
    "\071\025\064\027\056\001\001\000\002\001\001\000\004" +
    "\011\267\001\001\000\002\001\001\000\004\011\271\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  Lexer lex;
  int literalId = 0;
  String outputPath;
  private final String LIB_PATH = "src/main/asm/santalib.asm";

  StringBuffer dataBuffer = new StringBuffer();
  StringBuffer codeBuffer = new StringBuffer();
  StringBuffer libBuffer = new StringBuffer();

  /* cargar libreria */

  public void cargarLibreria() {
    try {
      File libFile = new File(LIB_PATH);
      java.util.Scanner libScanner = new java.util.Scanner(libFile);
      while (libScanner.hasNextLine()) {
        String line = libScanner.nextLine();
        libBuffer.append(line + "\n");
      }
      libScanner.close();
    } catch (FileNotFoundException e) {
      System.out.println("Error al cargar la libreria");
      e.printStackTrace();
    }
  }

  public TipoExpresion validarTipado(String op, Expresion a, Expresion b, ArrayList<TipoExpresion> tiposValidos) {
    // validar que los tipos de a y b sean iguales
    if (a.getTipo() != b.getTipo()) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipos de datos " + a.getTipo().toString() + " y " + b.getTipo().toString() + " no compatibles para operacion " + op);
      return TipoExpresion.NULL;
    }
    // validar que el tipo de a esté en la lista de tipos validos
    if (!tiposValidos.contains(a.getTipo())) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + a.getTipo().toString() + " no valido para operacion " + op);
      return TipoExpresion.NULL;
    }

    return a.getTipo();
  }

  // overloading del metodo pero unario
  public TipoExpresion validarTipado(String op, Expresion a, ArrayList<TipoExpresion> tiposValidos) {
    // validar que el tipo de a esté en la lista de tipos validos
    if (!tiposValidos.contains(a.getTipo())) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + a.getTipo().toString() + " no valido para operacion " + op);
      return TipoExpresion.NULL;
    }

    return a.getTipo();
  }


  public void inicializarBuffers(){
    // carga los buffer codeBuffer y dataBuffer con .text y .data
    codeBuffer.append(".text\n");
    dataBuffer.append(".data\n");
    // añadir un endl al dataBuffer 
    dataBuffer.append("endl: .asciiz \"\\n\"\n");
    dataBuffer.append("fzero: .float 0.0\n");
    dataBuffer.append("fone: .float 1.0\n");
    dataBuffer.append("ftwo: .float 2.0\n");
    dataBuffer.append("log2: .float 0.69314718055994\n");
  }


  /**
  * Constructor de la clase parser
  * entrada: un lexer
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: inicializar el lexer y el symbolFactory
  */
  public parser(Lexer lex, String outputPath) {
    this.lex = lex;
    this.outputPath = outputPath;
    cargarLibreria();
    inicializarBuffers();
    this.symbolFactory = new DefaultSymbolFactory();
  }
  /**
  * Sobreescritura de métodos para el manejo de errores
  * entrada: un entero y un símbolo
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola el error
  */
  public void syntax_error(Symbol token) {
    if (token.value == null){
      return;
    }
    System.out.println("Error de sintaxis en la linea " + token.left + " columna " + token.right + ": " + token.value);
    System.out.println("Continuando...");
  }
  public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
    if (token.value == null){
      throw new Exception("Error de sintaxis irrecuperable al final del archivo");
    }
    throw new Exception("Error de sintaxis irrecuperable en la linea " + token.left + " columna " + token.right + ": " + token.value);
  }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  /** 
  * funciones públicas de pruebas para el lexer, por ahora
  * solo imprimen en consola
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola
  */
  HashMap<String, SymbolTable> tablasSimbolos = new HashMap<String, SymbolTable>();

  String currentHash = "";
  ArrayList<FirmaFuncion> firmasFunciones = new ArrayList<FirmaFuncion>();
  ArrayList<String> registrosSinUsar = new ArrayList<String>(Arrays.asList("$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$t8", "$t9"));
  ArrayList<String> registrosFloatSinUsar = new ArrayList<String>(Arrays.asList("$f0", "$f2", "$f3", "$f4", "$f5", "$f6", "$f7", "$f8", "$f9", "$f10", "$f11", "$f12", "$f13", "$f14", "$f15", "$f16", "$f17", "$f18", "$f19", "$f20", "$f21", "$f22", "$f23", "$f24", "$f25", "$f26", "$f27", "$f28", "$f29", "$f30", "$f31"));

  public void refrescarRegistros() {
    registrosSinUsar = new ArrayList<String>(Arrays.asList("$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$t8", "$t9"));
  }

  public void refrescarRegistrosFloat() {
    registrosFloatSinUsar = new ArrayList<String>(Arrays.asList("$f0", "$f2", "$f3", "$f4", "$f5", "$f6", "$f7", "$f8", "$f9", "$f10", "$f11", "$f12", "$f13", "$f14", "$f15", "$f16", "$f17", "$f18", "$f19", "$f20", "$f21", "$f22", "$f23", "$f24", "$f25", "$f26", "$f27", "$f28", "$f29", "$f30", "$f31"));
  }

  public void addFirmaFuncion(FirmaFuncion firma) {
    firmasFunciones.add(firma);
  }

  public String getUnoccupiedRegister() {
    
    if (registrosSinUsar.size() == 0) {

      System.out.println("Refrescando debido a falta de registros");
      // workaround temporal: refrescar registros
      refrescarRegistros();
      return getUnoccupiedRegister();
    }
    var reg = registrosSinUsar.get(0);
    registrosSinUsar.remove(0);
    return reg;
  }

  public String getUnoccupiedFloatRegister() {
    
    if (registrosFloatSinUsar.size() == 0) {

      System.out.println("Refrescando debido a falta de registros");
      // workaround temporal: refrescar registros
      refrescarRegistrosFloat();
      return getUnoccupiedFloatRegister();
    }
    var reg = registrosFloatSinUsar.get(0);
    registrosFloatSinUsar.remove(0);
    return reg;
  }

  public FirmaFuncion encontrarFuncion(String id) {
    for (FirmaFuncion firma : firmasFunciones) {
      if (firma.getNombre().equals(id)) {
        return firma;
      }
    }
    return null;
  }

  public FirmaFuncion functionActual() {
    return firmasFunciones.get(firmasFunciones.size() - 1);
  }


  /**
  * función para imprimir la tabla de símbolos
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola la tabla de símbolos
  */
  public void imprimirTablaSimbolos() {
    for (String key : tablasSimbolos.keySet()) {
      System.out.println("Tabla: " + key);
      var val = tablasSimbolos.get(key);
      val.imprimirTablaSimbolos();
    }
  }

  public void exportarTablaSimbolos() {
    List<String[]> data = new ArrayList<String[]>();
    data.add(new String[] {"Tabla", "TipoEntrada", "Nombre", "TipoDato"});
    for (String key : tablasSimbolos.keySet()) {
      var value = tablasSimbolos.get(key);
      for (SymbolTableObject value2 : value.getSymbolTable()) {
        data.add(new String[] {key, value2.getTipoEntrada(), value2.getNombre(), value2.getTipoDato()});
      }
    }
    
    MarkdownTablePrinter tablePrinter = new MarkdownTablePrinter(data, "src/main/test/tabla_sim.md");
    tablePrinter.print();
    System.out.println("Tabla de simbolos exportada a tabla_sim.md");
  }

  /**
  * Función para conseguir el tipo de un símbolo en la tabla de símbolos actual
  * entrada: un string
  * salida: un Expresion.TipoExpresion
  * restricciones: ninguna
  * objetivo: conseguir el tipo de un símbolo en la tabla de símbolos actual
  */
  public TipoExpresion getTipo(String nombre, boolean picarError) {
    for (SymbolTableObject value : tablasSimbolos.get(currentHash).getSymbolTable()) {
      if (value.getNombre().equals(nombre)) {
        return Expresion.tipoFromString(value.getTipoDato());
      }
    }
    if (picarError){
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Variable " + nombre + " no declarada en el alcance actual");
    }
    return TipoExpresion.NULL;
  }

  public void addDireccion(String id, String dir){
    for (SymbolTableObject value : tablasSimbolos.get(currentHash).getSymbolTable()) {
      if (value.getNombre().equals(id)) {
        value.setDireccion(dir);
      }
    }
  }

  public String getDireccion(String id){
    for (SymbolTableObject value : tablasSimbolos.get(currentHash).getSymbolTable()) {
      if (value.getNombre().equals(id)) {
        return value.getDireccion();
      }
    }
    return null;
  }


  /**
  * función para cambiar el hash actual al que se le asocian los símbolos
  * entrada: un string
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: cambiar el hash actual
  */
  public void setHash(String hash) {
    currentHash = hash;
    tablasSimbolos.put(hash, new SymbolTable());
  }
  /**
  * función para agregar un símbolo a la tabla de símbolos
  * entrada: un objeto de la clase SymbolTableObject
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: agregar un símbolo a la tabla de símbolos
  */
  public void addSymbol(SymbolTableObject symbol) {
    tablasSimbolos.get(currentHash).getSymbolTable().add(symbol);
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= funciones_bolsa_navidena 
            {
              Object RESULT =null;
		
    exportarTablaSimbolos();
    imprimirTablaSimbolos();


    if (encontrarFuncion("main") == null) {
      System.out.println("Error semántico: no se encontro la funcion main");
    }

    for (FirmaFuncion firma : firmasFunciones) {
      if (!firma.isRetornaValor()) {
        System.out.println("Error semántico: la funcion " + firma.getNombre() + " no tiene return valido");
      }
    } 
  
    // escribir en el archivo de salida los 3 buffers
    try {
      File outputFile = new File(outputPath);
      FileWriter writer = new FileWriter(outputFile);
      writer.write(dataBuffer.toString());
      writer.write(codeBuffer.toString());
      writer.write(libBuffer.toString());
      writer.close();
      System.out.println("Archivo de salida generado en " + outputPath);
    } catch (IOException e) {
      System.out.println("Error al escribir en el archivo de salida");
      e.printStackTrace();
    }


  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // t_santa ::= t_int_colacho 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // t_santa ::= t_float_santa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t_santa ::= t_bool_noel 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t_santa ::= t_char_pascuero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_santa ::= t_string_kris 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // l_santa ::= l_int_colacho 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // conseguir registro disponible
    var reg = getUnoccupiedRegister();
    // mover el valor del literal al registro
    codeBuffer.append("li " + reg + ", " + l + "\n");
    RESULT = new Expresion(l, TipoExpresion.INT, reg); 
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_santa ::= l_float_santa 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    // añadir definición de float al dataBuffer
    var str = l.toString();
    var strId = "float" + literalId;

    dataBuffer.append(strId + ": .float " + str + "\n");
    ++literalId;
    // conseguir registro disponible
    var reg = getUnoccupiedRegister();
    codeBuffer.append("lw " + reg + ", " + strId + "\n");
    RESULT = new Expresion(l, TipoExpresion.FLOAT, reg);
    
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_santa ::= l_t_noel 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    // cargar 1 en un registro
    var reg = getUnoccupiedRegister();
    codeBuffer.append("li " + reg + ", 1\n");
    RESULT = new Expresion(true, TipoExpresion.BOOL, reg);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_santa ::= l_f_noel 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // cargar 0 en un registro
    var reg = getUnoccupiedRegister();
    codeBuffer.append("li " + reg + ", 0\n");
    RESULT = new Expresion(false, TipoExpresion.BOOL, reg);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_santa ::= l_char_pascuero 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expresion(l, TipoExpresion.CHAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_santa ::= l_string_kris 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    // añadir definición de string al dataBuffer
    var str = (String)l;
    var strId = "str" + literalId;

    dataBuffer.append(strId + ": .asciiz \"" + str + "\"\n");

    ++literalId;
    // conseguir registro disponible
    var reg = getUnoccupiedRegister();
    // mover la dirección del string al registro
    codeBuffer.append("la " + reg + ", " + strId + "\n");
    RESULT = new Expresion(l, TipoExpresion.STRING, reg);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // args_santa ::= expresion_regalo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    var arrL = new ArrayList<Expresion>();
    arrL.add((Expresion)e);
    RESULT = arrL;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // args_santa ::= args_santa sep_regalo expresion_regalo 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    var arrL = (ArrayList<Expresion>)args;
    arrL.add((Expresion)e);
    RESULT = arrL;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones_bolsa_navidena ::= funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones_bolsa_navidena ::= funciones_bolsa_navidena funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_ayudante_santa ::= def_funcion_trineo bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    var nombre_funcion = (String)d;
    // en el caso que la función actual es la main, después de procesarla ocupo poner
    // el syscall de salida del programa
    if (nombre_funcion != null && nombre_funcion.equals("main")) {
      codeBuffer.append("li $v0, 10\n"); // syscall para terminar el programa
      codeBuffer.append("syscall\n");
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_ayudante_santa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_ayudante_santa ::= error def_funcion_trineo bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    var nombre_funcion = (String)d;
    // en el caso que la función actual es la main, después de procesarla ocupo poner
    // el syscall de salida del programa
    if (nombre_funcion != null && nombre_funcion.equals("main")) {
      codeBuffer.append("li $v0, 10\n"); // syscall para terminar el programa
      codeBuffer.append("syscall\n");
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_ayudante_santa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_funcion_trineo ::= function_chimenea t_int_colacho main_navidad p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		

    // 1. validación de que main no existe
    if (encontrarFuncion("main") != null) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Funcion main ya declarada");
    } else {
      setHash("main");
      RESULT = "main";
      addSymbol(new SymbolTableObject("funcion", "int", "main"));
      addFirmaFuncion(new FirmaFuncion("main", TipoExpresion.INT, true, new TipoExpresion[] {}));
      // función main no tiene por qué tener return, por lo tanto lo asignamos true por defecto
      // 2. inserción de label
      codeBuffer.append("main:\n");
    }

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    // 1. Validación de que el retorno sea válido
    // (char, int, float, bool)
    var str_tipo = tipo.toString();
    if (str_tipo != "char" && str_tipo != "int" && str_tipo != "float" && str_tipo != "bool") {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de retorno " + str_tipo + " no valido para una funcion");
    }
    else {
      // 2. Validación de que la función no existe
      if (encontrarFuncion(id.toString()) != null) {
        System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Funcion " + id.toString() + " ya declarada");
      } else {
        setHash(id.toString());
        RESULT = id.toString();
        addSymbol(new SymbolTableObject("funcion", tipo.toString(), id.toString()));
        addFirmaFuncion(new FirmaFuncion(id.toString(), Expresion.tipoFromString(tipo.toString()), false, new TipoExpresion[] {}));
        // 3. inserción de label
        codeBuffer.append("_" + id.toString() + ":\n");
      }
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$0 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
    // 1. Validación de que el retorno sea válido
    // (char, int, float, bool)
    var str_tipo = tipo.toString();
    if (str_tipo != "char" && str_tipo != "int" && str_tipo != "float" && str_tipo != "bool") {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de retorno " + str_tipo + " no valido para una funcion");
    }
    else {
      // 2. Validación de que la función no existe
      if (encontrarFuncion(id.toString()) != null) {
        System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Funcion " + id.toString() + " ya declarada");
      } else {
        setHash(id.toString());
        RESULT = id.toString();
        addSymbol(new SymbolTableObject("funcion", tipo.toString(), id.toString()));
        addFirmaFuncion(new FirmaFuncion(id.toString(), Expresion.tipoFromString(tipo.toString()), false, new TipoExpresion[] {}));
        // 3. inserción de label
        codeBuffer.append("_" + id.toString() + ":\n");
      }
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento NT$0 parametros_funcion_renos p_cierra_cuento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros_funcion_renos ::= parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros_funcion_renos ::= parametros_funcion_renos sep_regalo parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro_funcion_reno ::= t_santa id_persona 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    addSymbol(new SymbolTableObject("parametro", t.toString(), id.toString()));
    // Conseguir la función actual y meterle el parámetro
    functionActual().addTipoParametro(Expresion.tipoFromString(t.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_reno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elemento_arreglo_juguete ::= id_persona p_abre_empaque expresion_regalo p_cierra_empaque 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    RESULT = id.toString();
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento_arreglo_juguete",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_codigo_casa_jengibre ::= cb_abre_regalo lineas_hombre_jengibre cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_casa_jengibre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque_codigo_casa_jengibre ::= cb_abre_regalo error cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_casa_jengibre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retorno_carta_santa ::= return_envia expresion_regalo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var tipo = ((Expresion)e).getTipo();
    var tipoFuncion = functionActual().getTipoRetorno();
    if (tipo != tipoFuncion) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de retorno " + tipo.toString() + " no valido para una funcion de tipo " + tipoFuncion.toString());
    }
    else {
      functionActual().setRetornaValor(true);
    }
  
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno_carta_santa",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // retorno_carta_santa ::= return_envia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno_carta_santa",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea_hombre_jengibre ::= asignacion_adorno fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linea_hombre_jengibre ::= retorno_carta_santa fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_hombre_jengibre ::= expresion_regalo fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // linea_hombre_jengibre ::= break_corta fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_hombre_jengibre ::= do_until_fabrica_juguetes fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_hombre_jengibre ::= for_vispera 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // linea_hombre_jengibre ::= bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_hombre_jengibre ::= if_travieso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // linea_hombre_jengibre ::= error fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // llamada_func_pino ::= id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada_func_pino ::= id_persona p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada_func_pino ::= print_habla p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    var expr_args = (ArrayList<Expresion>)args;

    for (Expresion e : expr_args) {
      // hacer un switch con los diferentes tipos de la expresión
      // y generar el código de acuerdo al tipo
      switch (e.getTipo()) {
        case STRING:
          // cargar el contenido de la direccion de la expresión en $a0
          codeBuffer.append("move $a0, " + e.getDireccion() + "\n");
          codeBuffer.append("li $v0, 4\n");
          codeBuffer.append("syscall\n");

          break;

        case INT:
          // cargar el contenido de la expresión en $a0
          // recordar que e.getDireccion() es el registro donde está el valor
          codeBuffer.append("move $a0, " + e.getDireccion() + "\n");
          codeBuffer.append("li $v0, 1\n");
          codeBuffer.append("syscall\n");
          break;

        case FLOAT:
          // cargar el contenido de la expresión en $f12
          // recordar que e.getDireccion() es el registro donde está el valor
          // .getDireccion() siempre maneja registros de uso general

          // 1. pasar de uso general a $f12
          codeBuffer.append("mtc1 " + e.getDireccion() + ", $f12\n");
          codeBuffer.append("li $v0, 2\n");
          codeBuffer.append("syscall\n");
          break;
        // default error semántico
        default:
          System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + e.getTipo().toString() + " no valido para print");
          break;
      }
    }
    // después de imprimir todos los argumentos, imprimir un enter
    codeBuffer.append("la $a0, endl\n");
    codeBuffer.append("li $v0, 4\n");
    codeBuffer.append("syscall\n");
    RESULT = new Expresion("null", TipoExpresion.NULL);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamada_func_pino ::= print_habla p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;
		
    // generación de código de print endl 
    codeBuffer.append("la $a0, endl\n");
    codeBuffer.append("li $v0, 4\n");
    codeBuffer.append("syscall\n");
    RESULT = new Expresion("null", TipoExpresion.NULL);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada_func_pino ::= read_escucha p_abre_cuento id_persona p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // llamada_func_pino ::= read_escucha p_abre_cuento elemento_arreglo_juguete p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lineas_hombre_jengibre ::= linea_hombre_jengibre 
            {
              Object RESULT =null;
		 
    // limpiar los registros sin usar
    refrescarRegistros();
    refrescarRegistrosFloat();
    // añadir un enter al codigo (para depruar)
    codeBuffer.append("\n");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lineas_hombre_jengibre ::= lineas_hombre_jengibre linea_hombre_jengibre 
            {
              Object RESULT =null;
		
    // limpiar los registros sin usar
    refrescarRegistros();
    refrescarRegistrosFloat();
    // añadir un enter al codigo (para depruar)
    codeBuffer.append("\n");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l_arr_gordo ::= cb_abre_regalo args_santa cb_cierra_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  var arrL = (ArrayList<Expresion>)a;
  var valido = true;

  // iterar sobre el arreglo y verificar que todos los elementos sean del mismo tipo
  // y que el tipo sea char o int

  TipoExpresion tipo = arrL.get(0).getTipo();
  if (tipo != TipoExpresion.INT && tipo != TipoExpresion.CHAR) {
    System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + tipo.toString() + " no valido para arreglo");
    RESULT = new Expresion("null", TipoExpresion.NULL);
    valido = false;
  }
  for (Expresion e : arrL) {
    if (e.getTipo() != tipo) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + e.getTipo().toString() + " no valido para un literal de arreglo de tipo " + tipo.toString());
      RESULT = new Expresion("null", TipoExpresion.NULL);
      valido = false;  
      break;
    }
  }

  if (valido){
    // finalmente, retornar una nueva expresión con el tipo de dato del arreglo
    if (tipo == TipoExpresion.INT) {
      RESULT = new Expresion(arrL, TipoExpresion.INT_ARR);
    }
    else {
      RESULT = new Expresion(arrL, TipoExpresion.CHAR_ARR);
    }
  }



              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_arr_gordo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // do_until_fabrica_juguetes ::= do_hace bloque_codigo_casa_jengibre until_revisa p_abre_cuento expresion_regalo p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until_fabrica_juguetes",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // for_vispera ::= for_envuelve p_abre_cuento asignacion_existente_nieve fin_regalo expresion_regalo fin_regalo expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_vispera",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre else_inocente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista else_inocente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elif_ayudante_lista ::= elif_lista_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_ayudante_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elif_ayudante_lista ::= elif_ayudante_lista elif_lista_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_ayudante_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elif_lista_santa ::= elif_hada p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_lista_santa",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // else_inocente ::= else_duende bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_inocente",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion_adorno ::= local_dulce t_santa id_persona 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    if (getTipo(id.toString(), false) != TipoExpresion.NULL) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Variable " + id.toString() + " ya declarada");
    }
    else {
      addSymbol(new SymbolTableObject("local", t.toString(), id.toString()));
      addDireccion(id.toString(), String.valueOf(tablasSimbolos.get(currentHash).getCurrentSize()) + "($sp)");
      tablasSimbolos.get(currentHash).increaseSize(4);
      // si es una string, agregar el valor de endl por defecto.
      if (t.toString() == "string") {
        var reg = getUnoccupiedRegister();
        codeBuffer.append("la " + reg + ", endl\n");
        codeBuffer.append("sw " + reg + ", " + getDireccion(id.toString()) + "\n");
      }
      // si es un int, agregar 0 por defecto.
      if (t.toString() == "int") {
        var reg = getUnoccupiedRegister();
        codeBuffer.append("li " + reg + ", 0\n");
        codeBuffer.append("sw " + reg + ", " + getDireccion(id.toString()) + "\n");
      }
      // si es un float, agregar 0.0 por defecto.
      if (t.toString() == "float") {
        var reg = getUnoccupiedRegister();
        codeBuffer.append("lw " + reg + ", fzero\n");
        codeBuffer.append("sw " + reg + ", " + getDireccion(id.toString()) + "\n");
      }
      // si es un bool, agregar 0 por defecto.
      if (t.toString() == "bool") {
        var reg = getUnoccupiedRegister();
        codeBuffer.append("li " + reg + ", 0\n");
        codeBuffer.append("sw " + reg + ", " + getDireccion(id.toString()) + "\n");
      }
    }

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion_adorno ::= local_dulce t_santa id_persona p_abre_empaque l_int_colacho p_cierra_empaque 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l_int = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(t.toString() != "int" && t.toString() != "char"){
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + t.toString() + " no valido para arreglo");
    }
    else {

      var i_arr = (int)l_int;
      if (i_arr <= 0) {
        System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Longitud de arreglo " + i_arr + " no valida");
      }
      else {
        if (getTipo(el.toString(), false) != TipoExpresion.NULL) {
          System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Variable " + el.toString() + " ya declarada");
        }
        else {
          addSymbol(new SymbolTableObject("local", t.toString() + "[]", el.toString()));
        }
      }
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion_adorno ::= local_dulce t_santa id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (getTipo(id.toString(), false) != TipoExpresion.NULL) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Variable " + id.toString() + " ya declarada");
    } else {

      var expr = (Expresion)e;
      if (expr.getTipo() != Expresion.tipoFromString(t.toString())) {
        System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + expr.getTipo().toString() + " no valido para una variable de tipo " + t.toString());
      }
      else {
        addSymbol(new SymbolTableObject("local", t.toString(), id.toString()));
        addDireccion(id.toString(), String.valueOf(tablasSimbolos.get(currentHash).getCurrentSize()) + "($sp)");
        tablasSimbolos.get(currentHash).increaseSize(4);
        // si es una string, mover la dirección del string a la variable
        if (t.toString() == "string") {

          // conseguir la dirección del id 
          var dir = getDireccion(id.toString());
          // mover el valor de la expresión a la dirección del id
          var reg = getUnoccupiedRegister();
          codeBuffer.append("move " + reg + ", " + expr.getDireccion() + "\n");
          codeBuffer.append("sw " + reg + ", " + dir + "\n");
        } else {
          // mover e.getDireccion() (registro en el que está almacenado el literal)
          // hacia la dirección del id
          var dir = getDireccion(id.toString());
          codeBuffer.append("sw " + expr.getDireccion() + ", " + dir + "\n");
        }
      }
    }

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion_adorno ::= local_dulce t_santa id_persona p_abre_empaque l_int_colacho p_cierra_empaque assign_entregar l_arr_gordo 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l_int = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l_arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l_arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (t.toString() != "int" && t.toString() != "char") {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + t.toString() + " no valido para arreglo");
    }
    else {
      // Si llegamos aquí, sabemos que el tipo que buscamos es int o char
      // Y que recibimos un literal de arreglo que puede estar mal formado (NULL)
      // O bien formado con un tipo de dato que no es el que buscamos
      var e_arr = (Expresion)l_arr;
      if (e_arr.getTipo() == TipoExpresion.NULL){
        System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Literal de arreglo mal formado");
      }
      else {

        TipoExpresion tipo = Expresion.tipoFromString(t.toString() + "[]");

        if (e_arr.getTipo() != tipo){
          System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + e_arr.getTipo().toString() + " no valido para una variable de tipo " + tipo.toString());
        }
        else {
          // finalmente, asegurar que la longitud es la misma entre el arreglo y el literal
          var arr = (ArrayList<Expresion>)e_arr.getValor();
          if ((int)l_int != arr.size()) {
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Longitud de arreglo " + l_int + " no coincide con la longitud del literal de arreglo " + arr.size());
          }
          else {

            if (getTipo(el.toString(), false) != TipoExpresion.NULL) {
              System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Variable " + el.toString() + " ya declarada");
            }
            else {
              addSymbol(new SymbolTableObject("local", t.toString() + "[]", el.toString()));
            }
          }
        }
      }
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion_adorno ::= asignacion_existente_nieve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion_existente_nieve ::= id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var expr = (Expresion)e;
    var tipoId = getTipo(id.toString(), true);
    if (tipoId != expr.getTipo()) {
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + expr.getTipo().toString() + " no valido para una variable de tipo " + tipoId.toString());
    }
    else {
      // conseguir la dirección del id 
      var dir = getDireccion(id.toString());
      // mover el valor de la expresión a la dirección del id
      var reg = getUnoccupiedRegister();

      codeBuffer.append("move " + reg + ", " + expr.getDireccion() + "\n");
      codeBuffer.append("sw " + reg + ", " + dir + "\n");
  
      
    }
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_existente_nieve",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacion_existente_nieve ::= elemento_arreglo_juguete assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_existente_nieve",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_regalo ::= l_santa 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = l;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_regalo ::= id_persona 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // validar que existe la variable
    if (getTipo(id.toString(), true) != TipoExpresion.NULL) {
      // cargar el valor de la variable en un registro
      var dir = getDireccion(id.toString());
      var registro = getUnoccupiedRegister();
      codeBuffer.append("lw " + registro + ", " + dir + "\n");
      RESULT = new Expresion(id.toString(), getTipo(id.toString(), true), registro);
    } else {
      RESULT = new Expresion("null", TipoExpresion.NULL);
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_regalo ::= elemento_arreglo_juguete 
            {
              Object RESULT =null;
		int eajleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eajright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eaj = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Expresion(eaj.toString(), getTipo(eaj.toString(), true));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_regalo ::= p_abre_cuento expresion_regalo p_cierra_cuento 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_regalo ::= expr_ar_regaloprin 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_regalo ::= expr_rel_regalocomprado 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_regalo ::= expr_log_regalomanual 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_regalo ::= llamada_func_pino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_ar_regaloprin ::= expresion_regalo op_res_rodolfo expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var reg = getUnoccupiedRegister();
    var b_expr = (Expresion)b;
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("-", a_expr, b_expr, arraylist_tipos_validos);

    switch (tipo_res) {
      case INT: 
        // limpiar reg
        codeBuffer.append("li " + reg + ", 0\n");
        // restar a_expr y b_expr
        codeBuffer.append("sub " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " - " + b_expr.getValor().toString(), TipoExpresion.INT, reg);
        break;
      case FLOAT:
        var fRegA = getUnoccupiedFloatRegister();
        var fRegB = getUnoccupiedFloatRegister();
        codeBuffer.append("mtc1 " + a_expr.getDireccion() + ", " + fRegA + "\n");
        codeBuffer.append("mtc1 " + b_expr.getDireccion() + ", " + fRegB + "\n");
        codeBuffer.append("sub.s " + fRegA + ", " + fRegA + ", " + fRegB + "\n");
        codeBuffer.append("mfc1 " + reg + ", " + fRegA + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " - " + b_expr.getValor().toString(), TipoExpresion.FLOAT, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }


  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_ar_regaloprin ::= expresion_regalo op_sum_cupido expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("+", a_expr, b_expr, arraylist_tipos_validos);
    var reg = getUnoccupiedRegister();
    // switch para el tipo resultante, para finalmente pasar la direccion resultado
    // a un nuevo registro y retornar una nueva expresión
    switch (tipo_res) {
      case INT:
        // limpiar reg
        codeBuffer.append("li " + reg + ", 0\n");
        // sumar a_expr y b_expr
        codeBuffer.append("add " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " + " + b_expr.getValor().toString(), TipoExpresion.INT, reg);
        break;

      case FLOAT:
        // para las operaciones flotantes, como las direcciones siempre
        // están en registros de uso general, hay que pasarlas a registros
        // flotantes antes de hacer cualquier cosa.
        var fRegA = getUnoccupiedFloatRegister();
        var fRegB = getUnoccupiedFloatRegister();
        // pasar a fReg el valor de a_expr
        codeBuffer.append("mtc1 " + a_expr.getDireccion() + ", " + fRegA + "\n");
        // pasar a fReg el valor de b_expr
        codeBuffer.append("mtc1 " + b_expr.getDireccion() + ", " + fRegB + "\n");
        // sumar a_expr y b_expr
        codeBuffer.append("add.s " + fRegA + ", " + fRegA + ", " + fRegB + "\n");
        // pasar el resultado a un nuevo registro de uso general
        codeBuffer.append("mfc1 " + reg + ", " + fRegA + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " + " + b_expr.getValor().toString(), TipoExpresion.FLOAT, reg);        
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_ar_regaloprin ::= expresion_regalo op_div_bailarin expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var reg = getUnoccupiedRegister();
    var b_expr = (Expresion)b;
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("/", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res) {
      case INT:
        // limpiar reg
        codeBuffer.append("li " + reg + ", 0\n");
        // dividir a_expr y b_expr
        codeBuffer.append("div " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        // guardar el resultado en reg
        codeBuffer.append("mflo " + reg + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " / " + b_expr.getValor().toString(), TipoExpresion.INT, reg);
        break;
      case FLOAT:
        var fRegA = getUnoccupiedFloatRegister();
        var fRegB = getUnoccupiedFloatRegister();
        codeBuffer.append("mtc1 " + a_expr.getDireccion() + ", " + fRegA + "\n");
        codeBuffer.append("mtc1 " + b_expr.getDireccion() + ", " + fRegB + "\n");
        codeBuffer.append("div.s " + fRegA + ", " + fRegA + ", " + fRegB + "\n");
        codeBuffer.append("mfc1 " + reg + ", " + fRegA + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " / " + b_expr.getValor().toString(), TipoExpresion.FLOAT, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_ar_regaloprin ::= expresion_regalo op_mul_cometa expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("*", a_expr, b_expr, arraylist_tipos_validos);

    switch (tipo_res) {
      case INT:
        // limpiar reg
        codeBuffer.append("li " + reg + ", 0\n");
        // multiplicar a_expr y b_expr
        codeBuffer.append("mul " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " * " + b_expr.getValor().toString(), TipoExpresion.INT, reg);
        break;
      case FLOAT: 
        var fRegA = getUnoccupiedFloatRegister();
        var fRegB = getUnoccupiedFloatRegister();
        codeBuffer.append("mtc1 " + a_expr.getDireccion() + ", " + fRegA + "\n");
        codeBuffer.append("mtc1 " + b_expr.getDireccion() + ", " + fRegB + "\n");
        codeBuffer.append("mul.s " + fRegA + ", " + fRegA + ", " + fRegB + "\n");
        codeBuffer.append("mfc1 " + reg + ", " + fRegA + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " * " + b_expr.getValor().toString(), TipoExpresion.FLOAT, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_ar_regaloprin ::= expresion_regalo op_mod_rayo expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;

    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("~", a_expr, b_expr, arraylist_tipos_validos);
  
    var reg = getUnoccupiedRegister();
    switch(tipo_res) {
      case INT:
        // limpiar reg
        codeBuffer.append("li " + reg + ", 0\n");
        // dividir a_expr y b_expr
        codeBuffer.append("div " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        // guardar el resultado en reg
        codeBuffer.append("mfhi " + reg + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " ~ " + b_expr.getValor().toString(), TipoExpresion.INT, reg);
        break;
      case FLOAT:
        codeBuffer.append("move $a0, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a1, " + b_expr.getDireccion() + "\n");
        // 2. guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // 3. llamar a la función
        codeBuffer.append("jal moduloFloat\n");
        // 4. meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // 5. recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " ~ " + b_expr.getValor().toString(), TipoExpresion.FLOAT, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_ar_regaloprin ::= expresion_regalo op_pow_travieso expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("**", a_expr, b_expr, arraylist_tipos_validos);

    switch (tipo_res) {
      case INT:
        // 1. meter los datos a $a0 y $a1
        codeBuffer.append("move $a0, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a1, " + b_expr.getDireccion() + "\n");
        // 2. guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // 3. llamar a la función
        codeBuffer.append("jal expInt\n");
        // 4. meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // 5. recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " ** " + b_expr.getValor().toString(), TipoExpresion.INT, reg);
        break;
      case FLOAT:
        codeBuffer.append("move $a0, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a1, " + b_expr.getDireccion() + "\n");
        // 2. guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // 3. llamar a la función
        codeBuffer.append("jal pow\n");
        // 4. meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // 5. recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " ** " + b_expr.getValor().toString(), TipoExpresion.FLOAT, reg);

        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_ar_regaloprin ::= op_inc_quien id_persona 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // conseguir la dirección de la variable
    var dir = getDireccion(id.toString());
    var reg = getUnoccupiedRegister();
    if (dir == null){
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Variable " + id.toString() + " no declarada");
      RESULT = new Expresion("null", TipoExpresion.NULL);
    }
    else {
      // conseguir el tipo de la variable (si tiene dirección también tiene tipo)
      var tipo = getTipo(id.toString(), false);
      switch (tipo) {
        case INT:
          // conseguir valor en la dirección cargándolo a un registro
          codeBuffer.append("lw " + reg + ", " + dir + "\n");
          // sumar 1 al registro
          codeBuffer.append("addi " + reg + ", " + reg + ", 1\n");
          // guardar el valor en la dirección
          codeBuffer.append("sw " + reg + ", " + dir + "\n");
          RESULT = new Expresion(id.toString() + "++", TipoExpresion.INT, reg);

          break;
        case FLOAT:
          // conseguir valor en la dirección cargándolo a un registro flotante
          var fReg = getUnoccupiedFloatRegister();
          codeBuffer.append("l.s " + fReg + ", " + dir + "\n");
          // cargar 1 en un registro flotante
          var fRegOne = getUnoccupiedFloatRegister();
          codeBuffer.append("l.s " + fRegOne + ", fone\n");
          // sumar 1 al registro
          codeBuffer.append("add.s " + fReg + ", " + fReg + ", " + fRegOne + "\n");
          // guardar el valor en la dirección
          codeBuffer.append("s.s " + fReg + ", " + dir + "\n");
          // cargar el valor del registro flotante a un registro de uso general
          codeBuffer.append("mfc1 " + reg + ", " + fReg + "\n");
          RESULT = new Expresion(id.toString() + "++", TipoExpresion.FLOAT, reg);

          break;
        default:
          System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + tipo.toString() + " no valido para incremento");
          RESULT = new Expresion("null", TipoExpresion.NULL);
      }
    }


  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_ar_regaloprin ::= op_dec_grinch id_persona 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Conseguir dirección de la variable
    var dir = getDireccion(id.toString());
    var reg = getUnoccupiedRegister();
    if (dir == null){
      System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Variable " + id.toString() + " no declarada");
      RESULT = new Expresion("null", TipoExpresion.NULL);
    } else {
      var tipo = getTipo(id.toString(), false);
      switch (tipo) {
        case INT:
          // conseguir valor en la dirección cargándolo a un registro
          codeBuffer.append("lw " + reg + ", " + dir + "\n");
          // restar 1 al registro
          codeBuffer.append("addi " + reg + ", " + reg + ", -1\n");
          // guardar el valor en la dirección
          codeBuffer.append("sw " + reg + ", " + dir + "\n");
          RESULT = new Expresion(id.toString() + "--", TipoExpresion.INT, reg);

          break;
        case FLOAT:
          // conseguir valor en la dirección cargándolo a un registro flotante
          var fReg = getUnoccupiedFloatRegister();
          codeBuffer.append("l.s " + fReg + ", " + dir + "\n");
          // cargar 1 en un registro flotante
          var fRegOne = getUnoccupiedFloatRegister();
          codeBuffer.append("l.s " + fRegOne + ", fone\n");
          // restar 1 al registro
          codeBuffer.append("sub.s " + fReg + ", " + fReg + ", " + fRegOne + "\n");
          // guardar el valor en la dirección
          codeBuffer.append("s.s " + fReg + ", " + dir + "\n");
          // cargar el valor del registro flotante a un registro de uso general
          codeBuffer.append("mfc1 " + reg + ", " + fReg + "\n");
          RESULT = new Expresion(id.toString() + "--", TipoExpresion.FLOAT, reg);

          break;
        default:
          System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + tipo.toString() + " no valido para decremento");
          RESULT = new Expresion("null", TipoExpresion.NULL);
      }
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_ar_regaloprin ::= op_dec_grinch elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_ar_regaloprin ::= op_inc_quien elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_rel_regalocomprado ::= expresion_regalo op_eq_astuto expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT, TipoExpresion.BOOL));
    var tipo_res = validarTipado("==", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res) {
      case INT:
      case BOOL: // ambos tienen el mismo procedimiento
        codeBuffer.append("sub " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        codeBuffer.append("sltiu " + reg + ", " + reg + ", 1\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " == " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
      break;

      case FLOAT:
        // guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // cargar los valores de a_expr y b_expr en $a0 y $a1
        codeBuffer.append("move $a0, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a1, " + b_expr.getDireccion() + "\n");
        // llamar a la función
        codeBuffer.append("jal eqFloat\n");
        // meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " == " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);

      break; 
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_rel_regalocomprado ::= expresion_regalo op_l_nevado expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("<", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res){
      case INT:
        codeBuffer.append("slt " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " < " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
      break;
      case FLOAT: 
        // guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // cargar los valores de a_expr y b_expr en $a0 y $a1
        codeBuffer.append("move $a0, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a1, " + b_expr.getDireccion() + "\n");
        // llamar a la función
        codeBuffer.append("jal ltFloat\n");
        // meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " < " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_rel_regalocomprado ::= expresion_regalo op_g_alegre expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado(">", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res){
      case INT:
        codeBuffer.append("slt " + reg + ", " + b_expr.getDireccion() + ", " + a_expr.getDireccion() + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " > " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
      break;
      case FLOAT:
        // guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // cargar los valores de a_expr y b_expr en $a0 y $a1
        codeBuffer.append("move $a1, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a0, " + b_expr.getDireccion() + "\n");
        // llamar a la función
        codeBuffer.append("jal ltFloat\n");
        // meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " > " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_rel_regalocomprado ::= expresion_regalo op_geq_feliz expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("=>", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res){ 
      case INT: 
        codeBuffer.append("slt " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        codeBuffer.append("xori " + reg + ", " + reg + ", 1\n"); // convierte 0 a 1 y 1 a 0 (xor con 1)
        RESULT = new Expresion(a_expr.getValor().toString() + " >= " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;

      case FLOAT: 
        // guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // cargar los valores de a_expr y b_expr en $a0 y $a1
        codeBuffer.append("move $a0, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a1, " + b_expr.getDireccion() + "\n");
        // llamar a la función
        codeBuffer.append("jal ltFloat\n");
        // meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // xor con 1
        codeBuffer.append("xori " + reg + ", " + reg + ", 1\n");
        // recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " >= " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_rel_regalocomprado ::= expresion_regalo op_leq_copito expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT));
    var tipo_res = validarTipado("=<", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res){
      case INT:
        codeBuffer.append("slt " + reg + ", " + b_expr.getDireccion() + ", " + a_expr.getDireccion() + "\n");
        codeBuffer.append("xori " + reg + ", " + reg + ", 1\n"); // convierte 0 a 1 y 1 a 0 (xor con 1)
        // !(b < a) = b >= a
        RESULT = new Expresion(a_expr.getValor().toString() + " <= " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      case FLOAT:
        // guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // cargar los valores de a_expr y b_expr en $a0 y $a1
        codeBuffer.append("move $a1, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a0, " + b_expr.getDireccion() + "\n");
        // llamar a la función
        codeBuffer.append("jal ltFloat\n");
        // meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // xor con 1
        codeBuffer.append("xori " + reg + ", " + reg + ", 1\n");

        // recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        // !(b < a) = b >= a
        RESULT = new Expresion(a_expr.getValor().toString() + " <= " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_rel_regalocomprado ::= expresion_regalo op_neq_chispa expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.INT, TipoExpresion.FLOAT, TipoExpresion.BOOL));
    var tipo_res = validarTipado("!=", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res) {
      case INT:
      case BOOL:
        codeBuffer.append("sub " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        codeBuffer.append("sltiu " + reg + ", " + reg + ", 1\n");
        codeBuffer.append("xori " + reg + ", " + reg + ", 1\n"); // convierte 0 a 1 y 1 a 0 (xor con 1) 
        RESULT = new Expresion(a_expr.getValor().toString() + " != " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      case FLOAT:
        // guardar mi $ra en la pila para no sobreescribirlo
        // al llamar la función
        codeBuffer.append("addi $sp, $sp, -4\n");
        codeBuffer.append("sw $ra, 0($sp)\n");
        // cargar los valores de a_expr y b_expr en $a0 y $a1
        codeBuffer.append("move $a0, " + a_expr.getDireccion() + "\n");
        codeBuffer.append("move $a1, " + b_expr.getDireccion() + "\n");
        // llamar a la función
        codeBuffer.append("jal eqFloat\n");
        // meter el resultado en reg
        codeBuffer.append("move " + reg + ", $v0\n");
        // xor con 1
        codeBuffer.append("xori " + reg + ", " + reg + ", 1\n");
        // recuperar $ra de la pila
        codeBuffer.append("lw $ra, 0($sp)\n");
        codeBuffer.append("addi $sp, $sp, 4\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " != " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_log_regalomanual ::= expresion_regalo op_and_melchor expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.BOOL));
    var tipo_res = validarTipado("^", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res) {
      case BOOL:
        codeBuffer.append("and " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " ^ " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_log_regalomanual ::= expresion_regalo op_or_gaspar expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var b_expr = (Expresion)b;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.BOOL));
    var tipo_res = validarTipado("#", a_expr, b_expr, arraylist_tipos_validos);
    switch (tipo_res) {
      case BOOL:
        codeBuffer.append("or " + reg + ", " + a_expr.getDireccion() + ", " + b_expr.getDireccion() + "\n");
        RESULT = new Expresion(a_expr.getValor().toString() + " # " + b_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_log_regalomanual ::= op_not_baltasar expresion_regalo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    var a_expr = (Expresion)a;
    var reg = getUnoccupiedRegister();
    var arraylist_tipos_validos = new ArrayList<TipoExpresion>(Arrays.asList(TipoExpresion.BOOL));
    var tipo_res = validarTipado("!", a_expr, arraylist_tipos_validos);
    switch (tipo_res) {
      case BOOL:
        codeBuffer.append("xori " + reg + ", " + a_expr.getDireccion() + ", 1\n");
        RESULT = new Expresion("!" + a_expr.getValor().toString(), TipoExpresion.BOOL, reg);
        break;
      default:
        RESULT = new Expresion("null", TipoExpresion.NULL);
        break;
    }  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
