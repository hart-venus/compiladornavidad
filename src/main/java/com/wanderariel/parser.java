
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wanderariel;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\005\000\002\006" +
    "\003\000\002\006\004\000\002\007\004\000\002\007\005" +
    "\000\002\010\007\000\002\010\007\000\002\036\002\000" +
    "\002\010\011\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\020\006\000\002\011\005\000\002\011" +
    "\005\000\002\026\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\027\005\000\002\027\006\000\002\027" +
    "\006\000\002\027\005\000\002\027\005\000\002\027\006" +
    "\000\002\015\003\000\002\015\004\000\002\021\005\000" +
    "\002\030\010\000\002\031\013\000\002\032\007\000\002" +
    "\032\010\000\002\032\010\000\002\032\011\000\002\033" +
    "\003\000\002\033\004\000\002\034\007\000\002\035\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\007\000" +
    "\002\016\007\000\002\016\003\000\002\022\005\000\002" +
    "\022\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\003\004\100\007\001\002\000\004\100" +
    "\007\001\002\000\004\052\042\001\002\000\004\002\040" +
    "\001\002\000\014\027\017\030\013\031\015\032\016\033" +
    "\014\001\002\000\010\002\ufff2\003\ufff2\100\ufff2\001\002" +
    "\000\010\002\000\003\004\100\007\001\002\000\010\002" +
    "\ufff1\003\ufff1\100\ufff1\001\002\000\004\026\ufffe\001\002" +
    "\000\004\026\ufffb\001\002\000\004\026\ufffd\001\002\000" +
    "\004\026\ufffc\001\002\000\006\026\uffff\076\035\001\002" +
    "\000\004\026\021\001\002\000\004\046\022\001\002\000" +
    "\016\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\047\024" +
    "\001\002\000\014\027\026\030\013\031\015\032\016\033" +
    "\014\001\002\000\004\052\uffed\001\002\000\006\047\uffea" +
    "\075\uffea\001\002\000\004\026\uffff\001\002\000\004\026" +
    "\034\001\002\000\006\047\031\075\032\001\002\000\004" +
    "\052\uffeb\001\002\000\014\027\026\030\013\031\015\032" +
    "\016\033\014\001\002\000\006\047\uffe9\075\uffe9\001\002" +
    "\000\006\047\uffe8\075\uffe8\001\002\000\004\046\036\001" +
    "\002\000\004\047\037\001\002\000\004\052\uffee\001\002" +
    "\000\004\002\001\001\002\000\010\002\ufff0\003\ufff0\100" +
    "\ufff0\001\002\000\054\003\063\013\105\014\052\025\044" +
    "\026\061\040\067\041\076\042\074\043\064\044\062\045" +
    "\071\046\102\052\042\054\055\057\043\060\066\062\051" +
    "\063\075\071\106\072\077\101\046\001\002\000\004\046" +
    "\254\001\002\000\034\013\105\014\052\025\044\026\111" +
    "\040\067\041\076\042\074\043\064\044\062\045\071\046" +
    "\102\071\106\072\077\001\002\000\050\004\uffc0\005\uffc0" +
    "\006\uffc0\010\uffc0\011\uffc0\012\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\047\uffc0" +
    "\051\uffc0\053\uffc0\073\uffc0\075\uffc0\001\002\000\014\027" +
    "\026\030\013\031\015\032\016\033\014\001\002\000\050" +
    "\004\uffbc\005\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\047\uffbc\051\uffbc\053\uffbc\073\uffbc\075\uffbc\001" +
    "\002\000\004\073\240\001\002\000\034\013\105\014\052" +
    "\025\044\026\111\040\067\041\076\042\074\043\064\044" +
    "\062\045\071\046\102\071\106\072\077\001\002\000\004" +
    "\026\236\001\002\000\004\073\uffc3\001\002\000\056\003" +
    "\uffdc\013\uffdc\014\uffdc\025\uffdc\026\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\071\uffdc" +
    "\072\uffdc\101\uffdc\001\002\000\004\046\215\001\002\000" +
    "\042\004\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\073\uffbe\074\213\001\002\000\050\004\uffb9" +
    "\005\uffb9\006\uffb9\010\uffb9\011\uffb9\012\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\047\uffb9\051\uffb9\053\uffb9\073\uffb9\075\uffb9\001\002\000" +
    "\040\004\120\005\121\006\115\010\122\011\123\012\127" +
    "\015\125\016\131\017\124\020\116\021\130\022\117\023" +
    "\126\024\132\073\212\001\002\000\046\004\uffbf\005\uffbf" +
    "\006\uffbf\010\uffbf\011\uffbf\012\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\046\152" +
    "\050\151\073\uffbf\074\210\001\002\000\050\004\ufff6\005" +
    "\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\047" +
    "\ufff6\051\ufff6\053\ufff6\073\ufff6\075\ufff6\001\002\000\006" +
    "\053\207\073\170\001\002\000\050\004\ufff7\005\ufff7\006" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\047\ufff7\051" +
    "\ufff7\053\ufff7\073\ufff7\075\ufff7\001\002\000\050\004\uffba" +
    "\005\uffba\006\uffba\010\uffba\011\uffba\012\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\047\uffba\051\uffba\053\uffba\073\uffba\075\uffba\001\002\000" +
    "\004\052\042\001\002\000\050\004\ufffa\005\ufffa\006\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\047\ufffa\051\ufffa" +
    "\053\ufffa\073\ufffa\075\ufffa\001\002\000\056\003\uffde\013" +
    "\uffde\014\uffde\025\uffde\026\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\052\uffde\053\uffde\054" +
    "\uffde\057\uffde\060\uffde\062\uffde\063\uffde\071\uffde\072\uffde" +
    "\101\uffde\001\002\000\050\004\ufff5\005\ufff5\006\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\047\ufff5\051\ufff5\053" +
    "\ufff5\073\ufff5\075\ufff5\001\002\000\050\004\uffbb\005\uffbb" +
    "\006\uffbb\010\uffbb\011\uffbb\012\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\047\uffbb" +
    "\051\uffbb\053\uffbb\073\uffbb\075\uffbb\001\002\000\004\073" +
    "\201\001\002\000\050\004\ufff8\005\ufff8\006\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\047\ufff8\051\ufff8\053\ufff8" +
    "\073\ufff8\075\ufff8\001\002\000\004\073\200\001\002\000" +
    "\050\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\047\ufff9\051\ufff9\053\ufff9\073\ufff9\075\ufff9" +
    "\001\002\000\004\046\174\001\002\000\056\003\uffd4\013" +
    "\uffd4\014\uffd4\025\uffd4\026\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\057\uffd4\060\uffd4\062\uffd4\063\uffd4\071\uffd4\072\uffd4" +
    "\101\uffd4\001\002\000\056\003\uffdd\013\uffdd\014\uffdd\025" +
    "\uffdd\026\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\052\uffdd\053\uffdd\054\uffdd\057\uffdd\060" +
    "\uffdd\062\uffdd\063\uffdd\071\uffdd\072\uffdd\101\uffdd\001\002" +
    "\000\034\013\105\014\052\025\044\026\111\040\067\041" +
    "\076\042\074\043\064\044\062\045\071\046\102\071\106" +
    "\072\077\001\002\000\004\073\171\001\002\000\056\003" +
    "\166\013\105\014\052\025\044\026\061\040\067\041\076" +
    "\042\074\043\064\044\062\045\071\046\102\052\042\053" +
    "\165\054\055\057\043\060\066\062\051\063\075\071\106" +
    "\072\077\101\046\001\002\000\004\026\164\001\002\000" +
    "\004\046\107\001\002\000\036\013\105\014\052\025\044" +
    "\026\111\040\067\041\076\042\074\043\064\044\062\045" +
    "\071\046\102\047\114\071\106\072\077\001\002\000\006" +
    "\047\162\075\156\001\002\000\054\004\uffbf\005\uffbf\006" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\046\152\047" +
    "\uffbf\050\151\051\uffbf\053\uffbf\073\uffbf\075\uffbf\001\002" +
    "\000\050\004\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\047\uffbe\051\uffbe\053\uffbe\073\uffbe\075" +
    "\uffbe\001\002\000\044\004\120\005\121\006\115\010\122" +
    "\011\123\012\127\015\125\016\131\017\124\020\116\021" +
    "\130\022\117\023\126\024\132\047\ufff4\053\ufff4\075\ufff4" +
    "\001\002\000\050\004\uffd7\005\uffd7\006\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\047\uffd7\051\uffd7\053\uffd7\073" +
    "\uffd7\075\uffd7\001\002\000\034\013\105\014\052\025\044" +
    "\026\111\040\067\041\076\042\074\043\064\044\062\045" +
    "\071\046\102\071\106\072\077\001\002\000\034\013\105" +
    "\014\052\025\044\026\111\040\067\041\076\042\074\043" +
    "\064\044\062\045\071\046\102\071\106\072\077\001\002" +
    "\000\034\013\105\014\052\025\044\026\111\040\067\041" +
    "\076\042\074\043\064\044\062\045\071\046\102\071\106" +
    "\072\077\001\002\000\034\013\105\014\052\025\044\026" +
    "\111\040\067\041\076\042\074\043\064\044\062\045\071" +
    "\046\102\071\106\072\077\001\002\000\034\013\105\014" +
    "\052\025\044\026\111\040\067\041\076\042\074\043\064" +
    "\044\062\045\071\046\102\071\106\072\077\001\002\000" +
    "\034\013\105\014\052\025\044\026\111\040\067\041\076" +
    "\042\074\043\064\044\062\045\071\046\102\071\106\072" +
    "\077\001\002\000\034\013\105\014\052\025\044\026\111" +
    "\040\067\041\076\042\074\043\064\044\062\045\071\046" +
    "\102\071\106\072\077\001\002\000\034\013\105\014\052" +
    "\025\044\026\111\040\067\041\076\042\074\043\064\044" +
    "\062\045\071\046\102\071\106\072\077\001\002\000\034" +
    "\013\105\014\052\025\044\026\111\040\067\041\076\042" +
    "\074\043\064\044\062\045\071\046\102\071\106\072\077" +
    "\001\002\000\034\013\105\014\052\025\044\026\111\040" +
    "\067\041\076\042\074\043\064\044\062\045\071\046\102" +
    "\071\106\072\077\001\002\000\034\013\105\014\052\025" +
    "\044\026\111\040\067\041\076\042\074\043\064\044\062" +
    "\045\071\046\102\071\106\072\077\001\002\000\034\013" +
    "\105\014\052\025\044\026\111\040\067\041\076\042\074" +
    "\043\064\044\062\045\071\046\102\071\106\072\077\001" +
    "\002\000\034\013\105\014\052\025\044\026\111\040\067" +
    "\041\076\042\074\043\064\044\062\045\071\046\102\071" +
    "\106\072\077\001\002\000\034\013\105\014\052\025\044" +
    "\026\111\040\067\041\076\042\074\043\064\044\062\045" +
    "\071\046\102\071\106\072\077\001\002\000\050\004\uffa7" +
    "\005\uffa7\006\uffa7\010\uffa7\011\uffa7\012\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\047\uffa7\051\uffa7\053\uffa7\073\uffa7\075\uffa7\001\002\000" +
    "\050\004\uffad\005\uffad\006\uffad\010\uffad\011\uffad\012\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\130\022\117\023" +
    "\126\024\132\047\uffad\051\uffad\053\uffad\073\uffad\075\uffad" +
    "\001\002\000\050\004\uffaa\005\uffaa\006\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\023\126\024\132\047\uffaa\051\uffaa\053\uffaa\073" +
    "\uffaa\075\uffaa\001\002\000\050\004\uffb3\005\uffb3\006\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\015\125\016\131\017\124\020" +
    "\116\021\130\022\117\023\126\024\132\047\uffb3\051\uffb3" +
    "\053\uffb3\073\uffb3\075\uffb3\001\002\000\050\004\uffa8\005" +
    "\uffa8\006\uffa8\010\uffa8\011\uffa8\012\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\132\047" +
    "\uffa8\051\uffa8\053\uffa8\073\uffa8\075\uffa8\001\002\000\050" +
    "\004\uffae\005\uffae\006\uffae\010\uffae\011\uffae\012\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\130\022\117\023\126" +
    "\024\132\047\uffae\051\uffae\053\uffae\073\uffae\075\uffae\001" +
    "\002\000\050\004\uffac\005\uffac\006\uffac\010\uffac\011\uffac" +
    "\012\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\130\022" +
    "\117\023\126\024\132\047\uffac\051\uffac\053\uffac\073\uffac" +
    "\075\uffac\001\002\000\050\004\uffb4\005\uffb4\006\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\015\125\016\131\017\124\020\116" +
    "\021\130\022\117\023\126\024\132\047\uffb4\051\uffb4\053" +
    "\uffb4\073\uffb4\075\uffb4\001\002\000\050\004\uffb5\005\uffb5" +
    "\006\uffb5\010\uffb5\011\123\012\127\015\125\016\131\017" +
    "\124\020\116\021\130\022\117\023\126\024\132\047\uffb5" +
    "\051\uffb5\053\uffb5\073\uffb5\075\uffb5\001\002\000\050\004" +
    "\uffb7\005\uffb7\006\115\010\122\011\123\012\127\015\125" +
    "\016\131\017\124\020\116\021\130\022\117\023\126\024" +
    "\132\047\uffb7\051\uffb7\053\uffb7\073\uffb7\075\uffb7\001\002" +
    "\000\050\004\uffb8\005\uffb8\006\115\010\122\011\123\012" +
    "\127\015\125\016\131\017\124\020\116\021\130\022\117" +
    "\023\126\024\132\047\uffb8\051\uffb8\053\uffb8\073\uffb8\075" +
    "\uffb8\001\002\000\050\004\uffa9\005\uffa9\006\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\126\024\132\047\uffa9\051\uffa9\053\uffa9" +
    "\073\uffa9\075\uffa9\001\002\000\050\004\uffab\005\uffab\006" +
    "\uffab\010\uffab\011\uffab\012\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\130\022\117\023\126\024\132\047\uffab\051" +
    "\uffab\053\uffab\073\uffab\075\uffab\001\002\000\050\004\uffb6" +
    "\005\uffb6\006\uffb6\010\uffb6\011\123\012\127\015\125\016" +
    "\131\017\124\020\116\021\130\022\117\023\126\024\132" +
    "\047\uffb6\051\uffb6\053\uffb6\073\uffb6\075\uffb6\001\002\000" +
    "\034\013\105\014\052\025\044\026\111\040\067\041\076" +
    "\042\074\043\064\044\062\045\071\046\102\071\106\072" +
    "\077\001\002\000\036\013\105\014\052\025\044\026\111" +
    "\040\067\041\076\042\074\043\064\044\062\045\071\046" +
    "\102\047\154\071\106\072\077\001\002\000\006\047\155" +
    "\075\156\001\002\000\050\004\uffda\005\uffda\006\uffda\010" +
    "\uffda\011\uffda\012\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\047\uffda\051\uffda\053" +
    "\uffda\073\uffda\075\uffda\001\002\000\050\004\uffd9\005\uffd9" +
    "\006\uffd9\010\uffd9\011\uffd9\012\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\047\uffd9" +
    "\051\uffd9\053\uffd9\073\uffd9\075\uffd9\001\002\000\034\013" +
    "\105\014\052\025\044\026\111\040\067\041\076\042\074" +
    "\043\064\044\062\045\071\046\102\071\106\072\077\001" +
    "\002\000\044\004\120\005\121\006\115\010\122\011\123" +
    "\012\127\015\125\016\131\017\124\020\116\021\130\022" +
    "\117\023\126\024\132\047\ufff3\053\ufff3\075\ufff3\001\002" +
    "\000\040\004\120\005\121\006\115\010\122\011\123\012" +
    "\127\015\125\016\131\017\124\020\116\021\130\022\117" +
    "\023\126\024\132\051\161\001\002\000\052\004\uffe7\005" +
    "\uffe7\006\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\047" +
    "\uffe7\051\uffe7\053\uffe7\073\uffe7\074\uffe7\075\uffe7\001\002" +
    "\000\050\004\uffd8\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\047\uffd8\051\uffd8\053\uffd8\073\uffd8\075" +
    "\uffd8\001\002\000\050\004\uffaf\005\uffaf\006\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\047\uffaf\051\uffaf\053\uffaf" +
    "\073\uffaf\075\uffaf\001\002\000\052\004\uffb2\005\uffb2\006" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\047\uffb2\050" +
    "\151\051\uffb2\053\uffb2\073\uffb2\075\uffb2\001\002\000\070" +
    "\002\uffe6\003\uffe6\013\uffe6\014\uffe6\025\uffe6\026\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\071\uffe6\072\uffe6\100\uffe6" +
    "\101\uffe6\001\002\000\004\073\170\001\002\000\056\003" +
    "\uffd3\013\uffd3\014\uffd3\025\uffd3\026\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3\071\uffd3" +
    "\072\uffd3\101\uffd3\001\002\000\056\003\uffdb\013\uffdb\014" +
    "\uffdb\025\uffdb\026\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\052\uffdb\053\uffdb\054\uffdb\057" +
    "\uffdb\060\uffdb\062\uffdb\063\uffdb\071\uffdb\072\uffdb\101\uffdb" +
    "\001\002\000\056\003\uffe3\013\uffe3\014\uffe3\025\uffe3\026" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\052\uffe3\053\uffe3\054\uffe3\057\uffe3\060\uffe3\062" +
    "\uffe3\063\uffe3\071\uffe3\072\uffe3\101\uffe3\001\002\000\040" +
    "\004\120\005\121\006\115\010\122\011\123\012\127\015" +
    "\125\016\131\017\124\020\116\021\130\022\117\023\126" +
    "\024\132\047\173\001\002\000\050\004\uffbd\005\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\047\uffbd\051" +
    "\uffbd\053\uffbd\073\uffbd\075\uffbd\001\002\000\036\013\105" +
    "\014\052\025\044\026\111\040\067\041\076\042\074\043" +
    "\064\044\062\045\071\046\102\047\176\071\106\072\077" +
    "\001\002\000\006\047\177\075\156\001\002\000\050\004" +
    "\uffd6\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\047\uffd6\051\uffd6\053\uffd6\073\uffd6\075\uffd6\001\002" +
    "\000\050\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\047\uffd5\051\uffd5\053\uffd5\073\uffd5\075" +
    "\uffd5\001\002\000\056\003\uffe0\013\uffe0\014\uffe0\025\uffe0" +
    "\026\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\052\uffe0\053\uffe0\054\uffe0\057\uffe0\060\uffe0" +
    "\062\uffe0\063\uffe0\071\uffe0\072\uffe0\101\uffe0\001\002\000" +
    "\056\003\uffdf\013\uffdf\014\uffdf\025\uffdf\026\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf" +
    "\071\uffdf\072\uffdf\101\uffdf\001\002\000\004\061\203\001" +
    "\002\000\004\046\204\001\002\000\034\013\105\014\052" +
    "\025\044\026\111\040\067\041\076\042\074\043\064\044" +
    "\062\045\071\046\102\071\106\072\077\001\002\000\040" +
    "\004\120\005\121\006\115\010\122\011\123\012\127\015" +
    "\125\016\131\017\124\020\116\021\130\022\117\023\126" +
    "\024\132\047\206\001\002\000\004\073\uffd1\001\002\000" +
    "\070\002\uffe5\003\uffe5\013\uffe5\014\uffe5\025\uffe5\026\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\071\uffe5\072\uffe5\100" +
    "\uffe5\101\uffe5\001\002\000\034\013\105\014\052\025\044" +
    "\026\111\040\067\041\076\042\074\043\064\044\062\045" +
    "\071\046\102\071\106\072\077\001\002\000\040\004\120" +
    "\005\121\006\115\010\122\011\123\012\127\015\125\016" +
    "\131\017\124\020\116\021\130\022\117\023\126\024\132" +
    "\073\uffc2\001\002\000\056\003\uffe1\013\uffe1\014\uffe1\025" +
    "\uffe1\026\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\052\uffe1\053\uffe1\054\uffe1\057\uffe1\060" +
    "\uffe1\062\uffe1\063\uffe1\071\uffe1\072\uffe1\101\uffe1\001\002" +
    "\000\034\013\105\014\052\025\044\026\111\040\067\041" +
    "\076\042\074\043\064\044\062\045\071\046\102\071\106" +
    "\072\077\001\002\000\040\004\120\005\121\006\115\010" +
    "\122\011\123\012\127\015\125\016\131\017\124\020\116" +
    "\021\130\022\117\023\126\024\132\073\uffc1\001\002\000" +
    "\034\013\105\014\052\025\044\026\111\040\067\041\076" +
    "\042\074\043\064\044\062\045\071\046\102\071\106\072" +
    "\077\001\002\000\040\004\120\005\121\006\115\010\122" +
    "\011\123\012\127\015\125\016\131\017\124\020\116\021" +
    "\130\022\117\023\126\024\132\047\217\001\002\000\004" +
    "\052\042\001\002\000\062\003\uffcf\013\uffcf\014\uffcf\025" +
    "\uffcf\026\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\052\uffcf\053\uffcf\054\uffcf\055\221\056" +
    "\224\057\uffcf\060\uffcf\062\uffcf\063\uffcf\071\uffcf\072\uffcf" +
    "\101\uffcf\001\002\000\004\046\231\001\002\000\062\003" +
    "\uffce\013\uffce\014\uffce\025\uffce\026\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\221\056\224\057\uffce\060\uffce\062\uffce" +
    "\063\uffce\071\uffce\072\uffce\101\uffce\001\002\000\056\003" +
    "\uffcd\013\uffcd\014\uffcd\025\uffcd\026\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\057\uffcd\060\uffcd\062\uffcd\063\uffcd\071\uffcd" +
    "\072\uffcd\101\uffcd\001\002\000\004\052\042\001\002\000" +
    "\062\003\uffcb\013\uffcb\014\uffcb\025\uffcb\026\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\062\uffcb\063\uffcb\071\uffcb\072\uffcb\101\uffcb\001\002\000" +
    "\056\003\uffc8\013\uffc8\014\uffc8\025\uffc8\026\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8" +
    "\071\uffc8\072\uffc8\101\uffc8\001\002\000\056\003\uffcc\013" +
    "\uffcc\014\uffcc\025\uffcc\026\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\057\uffcc\060\uffcc\062\uffcc\063\uffcc\071\uffcc\072\uffcc" +
    "\101\uffcc\001\002\000\062\003\uffca\013\uffca\014\uffca\025" +
    "\uffca\026\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\062\uffca\063\uffca\071\uffca\072\uffca" +
    "\101\uffca\001\002\000\034\013\105\014\052\025\044\026" +
    "\111\040\067\041\076\042\074\043\064\044\062\045\071" +
    "\046\102\071\106\072\077\001\002\000\040\004\120\005" +
    "\121\006\115\010\122\011\123\012\127\015\125\016\131" +
    "\017\124\020\116\021\130\022\117\023\126\024\132\047" +
    "\233\001\002\000\004\052\042\001\002\000\062\003\uffc9" +
    "\013\uffc9\014\uffc9\025\uffc9\026\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\062\uffc9\063" +
    "\uffc9\071\uffc9\072\uffc9\101\uffc9\001\002\000\050\004\uffb0" +
    "\005\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\047\uffb0\051\uffb0\053\uffb0\073\uffb0\075\uffb0\001\002\000" +
    "\052\004\uffb1\005\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\047\uffb1\050\151\051\uffb1\053\uffb1\073\uffb1" +
    "\075\uffb1\001\002\000\040\004\120\005\121\006\115\010" +
    "\122\011\123\012\127\015\125\016\131\017\124\020\116" +
    "\021\130\022\117\023\126\024\132\073\uffe4\001\002\000" +
    "\056\003\uffe2\013\uffe2\014\uffe2\025\uffe2\026\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2" +
    "\071\uffe2\072\uffe2\101\uffe2\001\002\000\004\026\243\001" +
    "\002\000\006\073\uffc6\074\246\001\002\000\010\050\151" +
    "\073\uffc7\074\244\001\002\000\034\013\105\014\052\025" +
    "\044\026\111\040\067\041\076\042\074\043\064\044\062" +
    "\045\071\046\102\071\106\072\077\001\002\000\040\004" +
    "\120\005\121\006\115\010\122\011\123\012\127\015\125" +
    "\016\131\017\124\020\116\021\130\022\117\023\126\024" +
    "\132\073\uffc5\001\002\000\004\052\250\001\002\000\004" +
    "\073\uffc4\001\002\000\034\013\105\014\052\025\044\026" +
    "\111\040\067\041\076\042\074\043\064\044\062\045\071" +
    "\046\102\071\106\072\077\001\002\000\006\053\252\075" +
    "\156\001\002\000\004\073\uffd2\001\002\000\050\004\uffa6" +
    "\005\uffa6\006\uffa6\010\uffa6\011\uffa6\012\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\047\uffa6\051\uffa6\053\uffa6\073\uffa6\075\uffa6\001\002\000" +
    "\004\026\257\001\002\000\004\074\213\001\002\000\004" +
    "\073\260\001\002\000\006\050\151\074\210\001\002\000" +
    "\034\013\105\014\052\025\044\026\111\040\067\041\076" +
    "\042\074\043\064\044\062\045\071\046\102\071\106\072" +
    "\077\001\002\000\040\004\120\005\121\006\115\010\122" +
    "\011\123\012\127\015\125\016\131\017\124\020\116\021" +
    "\130\022\117\023\126\024\132\073\262\001\002\000\034" +
    "\013\105\014\052\025\044\026\111\040\067\041\076\042" +
    "\074\043\064\044\062\045\071\046\102\071\106\072\077" +
    "\001\002\000\040\004\120\005\121\006\115\010\122\011" +
    "\123\012\127\015\125\016\131\017\124\020\116\021\130" +
    "\022\117\023\126\024\132\047\264\001\002\000\004\052" +
    "\042\001\002\000\056\003\uffd0\013\uffd0\014\uffd0\025\uffd0" +
    "\026\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\052\uffd0\053\uffd0\054\uffd0\057\uffd0\060\uffd0" +
    "\062\uffd0\063\uffd0\071\uffd0\072\uffd0\101\uffd0\001\002\000" +
    "\004\052\042\001\002\000\010\002\uffef\003\uffef\100\uffef" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\012\002\005\006\010\007\007\010\004\001" +
    "\001\000\004\010\265\001\001\000\004\011\040\001\001" +
    "\000\002\001\001\000\004\003\017\001\001\000\002\001" +
    "\001\000\006\007\011\010\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\022\001\001\000\010\003\026\012" +
    "\027\013\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\026\013\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\044\011\100\014\077\015\103\016\102\017" +
    "\057\020\055\022\052\023\046\024\071\025\064\026\047" +
    "\027\056\030\072\031\067\032\053\001\001\000\002\001" +
    "\001\000\020\004\044\017\252\020\111\023\046\024\071" +
    "\025\064\027\056\001\001\000\002\001\001\000\004\003" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\044\017\236\020\111\023\046\024\071\025\064\027" +
    "\056\001\001\000\004\020\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\044\017\171\020\111\023\046\024\071\025\064" +
    "\027\056\001\001\000\002\001\001\000\040\004\044\011" +
    "\100\014\166\016\102\017\057\020\055\022\052\023\046" +
    "\024\071\025\064\026\047\027\056\030\072\031\067\032" +
    "\053\001\001\000\004\020\162\001\001\000\002\001\001" +
    "\000\022\004\044\005\107\017\112\020\111\023\046\024" +
    "\071\025\064\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\044\017\147\020\111\023\046\024\071" +
    "\025\064\027\056\001\001\000\020\004\044\017\146\020" +
    "\111\023\046\024\071\025\064\027\056\001\001\000\020" +
    "\004\044\017\145\020\111\023\046\024\071\025\064\027" +
    "\056\001\001\000\020\004\044\017\144\020\111\023\046" +
    "\024\071\025\064\027\056\001\001\000\020\004\044\017" +
    "\143\020\111\023\046\024\071\025\064\027\056\001\001" +
    "\000\020\004\044\017\142\020\111\023\046\024\071\025" +
    "\064\027\056\001\001\000\020\004\044\017\141\020\111" +
    "\023\046\024\071\025\064\027\056\001\001\000\020\004" +
    "\044\017\140\020\111\023\046\024\071\025\064\027\056" +
    "\001\001\000\020\004\044\017\137\020\111\023\046\024" +
    "\071\025\064\027\056\001\001\000\020\004\044\017\136" +
    "\020\111\023\046\024\071\025\064\027\056\001\001\000" +
    "\020\004\044\017\135\020\111\023\046\024\071\025\064" +
    "\027\056\001\001\000\020\004\044\017\134\020\111\023" +
    "\046\024\071\025\064\027\056\001\001\000\020\004\044" +
    "\017\133\020\111\023\046\024\071\025\064\027\056\001" +
    "\001\000\020\004\044\017\132\020\111\023\046\024\071" +
    "\025\064\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\044\017\157\020\111\023\046\024\071\025\064\027\056" +
    "\001\001\000\022\004\044\005\152\017\112\020\111\023" +
    "\046\024\071\025\064\027\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\044\017" +
    "\156\020\111\023\046\024\071\025\064\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\044\005\174\017\112\020\111\023\046\024" +
    "\071\025\064\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\044" +
    "\017\204\020\111\023\046\024\071\025\064\027\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\044\017\210\020\111\023\046\024\071\025" +
    "\064\027\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\044\017\213\020\111\023\046\024\071\025" +
    "\064\027\056\001\001\000\002\001\001\000\020\004\044" +
    "\017\215\020\111\023\046\024\071\025\064\027\056\001" +
    "\001\000\002\001\001\000\004\011\217\001\001\000\010" +
    "\033\221\034\224\035\222\001\001\000\002\001\001\000" +
    "\006\034\227\035\226\001\001\000\002\001\001\000\004" +
    "\011\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\044\017\231" +
    "\020\111\023\046\024\071\025\064\027\056\001\001\000" +
    "\002\001\001\000\004\011\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\044\017\244\020\111\023" +
    "\046\024\071\025\064\027\056\001\001\000\002\001\001" +
    "\000\004\021\246\001\001\000\002\001\001\000\022\004" +
    "\044\005\250\017\112\020\111\023\046\024\071\025\064" +
    "\027\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\254\022\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\044\017\260\020\111\023\046\024\071\025\064\027\056" +
    "\001\001\000\002\001\001\000\020\004\044\017\262\020" +
    "\111\023\046\024\071\025\064\027\056\001\001\000\002" +
    "\001\001\000\004\011\264\001\001\000\002\001\001\000" +
    "\004\011\266\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  Lexer lex;

  /**
  * Constructor de la clase parser
  * entrada: un lexer
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: inicializar el lexer y el symbolFactory
  */
  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }
  /**
  * Sobreescritura de métodos para el manejo de errores
  * entrada: un entero y un símbolo
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola el error
  */
  public void syntax_error(Symbol token) {
    if (token.value == null){
      return;
    }
    System.out.println("Error de sintaxis en la linea " + token.left + " columna " + token.right + ": " + token.value);
    System.out.println("Continuando...");
  }
  public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
    throw new Exception("Error de sintaxis irrecuperable en la linea " + token.left + " columna " + token.right + ": " + token.value);
  }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  /** 
  * funciones públicas de pruebas para el lexer, por ahora
  * solo imprimen en consola
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola
  */
  HashMap<String, ArrayList<SymbolTableObject>> tablasSimbolos = new HashMap<String, ArrayList<SymbolTableObject>>();
  String currentHash = "";

  /**
  * función para imprimir la tabla de símbolos
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola la tabla de símbolos
  */
  public void imprimirTablaSimbolos() {
    for (String key : tablasSimbolos.keySet()) {
      System.out.println("Tabla de simbolo : " + key);
      System.out.println("Valores : ");
      for (SymbolTableObject value : tablasSimbolos.get(key)) {
        System.out.println(value.toString());
      }
      System.out.println();
    }
  }

  public void exportarTablaSimbolos() {
    List<String[]> data = new ArrayList<String[]>();
    data.add(new String[] {"Tabla", "TipoEntrada", "Nombre", "TipoDato"});
    for (String key : tablasSimbolos.keySet()) {
      for (SymbolTableObject value : tablasSimbolos.get(key)) {
        data.add(new String[] {key, value.getTipoEntrada(), value.getNombre(), value.getTipoDato()});
      }
    }
    MarkdownTablePrinter tablePrinter = new MarkdownTablePrinter(data, "src/main/test/tabla_sim.md");
    tablePrinter.print();
    System.out.println("Tabla de simbolos exportada a tabla_sim.md");
  }

  /**
  * función para cambiar el hash actual al que se le asocian los símbolos
  * entrada: un string
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: cambiar el hash actual
  */
  public void setHash(String hash) {
    currentHash = hash;
    tablasSimbolos.put(hash, new ArrayList<SymbolTableObject>());
  }
  /**
  * función para agregar un símbolo a la tabla de símbolos
  * entrada: un objeto de la clase SymbolTableObject
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: agregar un símbolo a la tabla de símbolos
  */
  public void addSymbol(SymbolTableObject symbol) {
    tablasSimbolos.get(currentHash).add(symbol);
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= funciones_bolsa_navidena 
            {
              Object RESULT =null;
		
    exportarTablaSimbolos();
    imprimirTablaSimbolos(); 
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // t_santa ::= t_int_colacho 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // t_santa ::= t_float_santa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t_santa ::= t_bool_noel 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t_santa ::= t_char_pascuero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_santa ::= t_string_kris 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // l_santa ::= l_int_colacho 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_santa ::= l_float_santa 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_santa ::= l_t_noel 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_santa ::= l_f_noel 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_santa ::= l_char_pascuero 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_santa ::= l_string_kris 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_santa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // args_santa ::= expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // args_santa ::= args_santa sep_regalo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_santa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones_bolsa_navidena ::= funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones_bolsa_navidena ::= funciones_bolsa_navidena funcion_ayudante_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_bolsa_navidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_ayudante_santa ::= def_funcion_trineo bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_ayudante_santa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_ayudante_santa ::= error def_funcion_trineo bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_ayudante_santa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_funcion_trineo ::= function_chimenea t_int_colacho main_navidad p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
    setHash("main");
    addSymbol(new SymbolTableObject("funcion", "int", "main"));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    setHash(id.toString());
    addSymbol(new SymbolTableObject("funcion", tipo.toString(), id.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$0 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
    setHash(id.toString());
    addSymbol(new SymbolTableObject("funcion", tipo.toString(), id.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_funcion_trineo ::= function_chimenea t_santa id_persona p_abre_cuento NT$0 parametros_funcion_renos p_cierra_cuento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funcion_trineo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros_funcion_renos ::= parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros_funcion_renos ::= parametros_funcion_renos sep_regalo parametro_funcion_reno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_renos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro_funcion_reno ::= t_santa id_persona 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    addSymbol(new SymbolTableObject("parametro", t.toString(), id.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_reno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elemento_arreglo_juguete ::= id_persona p_abre_empaque expresion_regalo p_cierra_empaque 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    RESULT = id.toString();
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento_arreglo_juguete",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_codigo_casa_jengibre ::= cb_abre_regalo lineas_hombre_jengibre cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_casa_jengibre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque_codigo_casa_jengibre ::= cb_abre_regalo error cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_casa_jengibre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retorno_carta_santa ::= return_envia expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno_carta_santa",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // linea_hombre_jengibre ::= asignacion_adorno fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea_hombre_jengibre ::= retorno_carta_santa fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linea_hombre_jengibre ::= expresion_regalo fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_hombre_jengibre ::= break_corta fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // linea_hombre_jengibre ::= do_until_fabrica_juguetes fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_hombre_jengibre ::= for_vispera 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_hombre_jengibre ::= bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // linea_hombre_jengibre ::= if_travieso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_hombre_jengibre ::= error fin_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_hombre_jengibre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // llamada_func_pino ::= id_persona p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // llamada_func_pino ::= id_persona p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada_func_pino ::= print_habla p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada_func_pino ::= print_habla p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamada_func_pino ::= read_escucha p_abre_cuento p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada_func_pino ::= read_escucha p_abre_cuento args_santa p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_func_pino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lineas_hombre_jengibre ::= linea_hombre_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lineas_hombre_jengibre ::= lineas_hombre_jengibre linea_hombre_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas_hombre_jengibre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // l_arr_gordo ::= cb_abre_regalo args_santa cb_cierra_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_arr_gordo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // do_until_fabrica_juguetes ::= do_hace bloque_codigo_casa_jengibre until_revisa p_abre_cuento expresion_regalo p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until_fabrica_juguetes",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_vispera ::= for_envuelve p_abre_cuento asignacion_existente_nieve fin_regalo expresion_regalo fin_regalo expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_vispera",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre else_inocente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_travieso ::= if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista else_inocente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_travieso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elif_ayudante_lista ::= elif_lista_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_ayudante_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elif_ayudante_lista ::= elif_ayudante_lista elif_lista_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_ayudante_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elif_lista_santa ::= elif_hada p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_lista_santa",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // else_inocente ::= else_duende bloque_codigo_casa_jengibre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_inocente",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion_adorno ::= local_dulce t_santa id_persona 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    addSymbol(new SymbolTableObject("local", t.toString(), id.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion_adorno ::= local_dulce t_santa elemento_arreglo_juguete 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    addSymbol(new SymbolTableObject("local", t.toString() + "[]", el.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion_adorno ::= local_dulce t_santa id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    addSymbol(new SymbolTableObject("local", t.toString(), id.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion_adorno ::= local_dulce t_santa elemento_arreglo_juguete assign_entregar l_arr_gordo 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    addSymbol(new SymbolTableObject("local", t.toString() + "[]", el.toString()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion_adorno ::= asignacion_existente_nieve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion_existente_nieve ::= id_persona assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_existente_nieve",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion_existente_nieve ::= elemento_arreglo_juguete assign_entregar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_existente_nieve",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_regalo ::= l_santa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_regalo ::= id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_regalo ::= elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_regalo ::= p_abre_cuento expresion_regalo p_cierra_cuento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_regalo ::= expr_ar_regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_regalo ::= expr_rel_regalocomprado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_regalo ::= expr_log_regalomanual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_regalo ::= llamada_func_pino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_ar_regaloprin ::= expresion_regalo op_res_rodolfo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_ar_regaloprin ::= expresion_regalo op_sum_cupido expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_ar_regaloprin ::= expresion_regalo op_div_bailarin expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_ar_regaloprin ::= expresion_regalo op_mul_cometa expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_ar_regaloprin ::= expresion_regalo op_mod_rayo expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_ar_regaloprin ::= expresion_regalo op_pow_travieso expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_ar_regaloprin ::= op_inc_quien id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_ar_regaloprin ::= op_dec_grinch id_persona 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_ar_regaloprin ::= op_dec_grinch elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_ar_regaloprin ::= op_inc_quien elemento_arreglo_juguete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ar_regaloprin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_rel_regalocomprado ::= expresion_regalo op_eq_astuto expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_rel_regalocomprado ::= expresion_regalo op_l_nevado expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_rel_regalocomprado ::= expresion_regalo op_g_alegre expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_rel_regalocomprado ::= expresion_regalo op_geq_feliz expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_rel_regalocomprado ::= expresion_regalo op_leq_copito expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_rel_regalocomprado ::= expresion_regalo op_neq_chispa expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel_regalocomprado",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_log_regalomanual ::= expresion_regalo op_and_melchor expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_log_regalomanual ::= expresion_regalo op_or_gaspar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_log_regalomanual ::= op_not_baltasar expresion_regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_log_regalomanual",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
