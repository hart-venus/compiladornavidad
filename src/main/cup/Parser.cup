import java_cup.runtime.*;
import java.util.*;

action code {:
  /** 
  * funciones públicas de pruebas para el lexer, por ahora
  * solo imprimen en consola
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola
  */
  HashMap<String, ArrayList<SymbolTableObject>> tablasSimbolos = new HashMap<String, ArrayList<SymbolTableObject>>();
  String currentHash = "";
  ArrayList<FirmaFuncion> firmasFunciones = new ArrayList<FirmaFuncion>();

  public void addFirmaFuncion(FirmaFuncion firma) {
    firmasFunciones.add(firma);
  }

  public FirmaFuncion encontrarFuncion(String id) {
    for (FirmaFuncion firma : firmasFunciones) {
      if (firma.getNombre().equals(id)) {
        return firma;
      }
    }
    return null;
  }

  public FirmaFuncion functionActual() {
    return firmasFunciones.get(firmasFunciones.size() - 1);
  }


  /**
  * función para imprimir la tabla de símbolos
  * entrada: ninguna
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola la tabla de símbolos
  */
  public void imprimirTablaSimbolos() {
    for (String key : tablasSimbolos.keySet()) {
      System.out.println("Tabla de simbolo : " + key);
      System.out.println("Valores : ");
      for (SymbolTableObject value : tablasSimbolos.get(key)) {
        System.out.println(value.toString());
      }
      System.out.println();
    }
  }

  public void exportarTablaSimbolos() {
    List<String[]> data = new ArrayList<String[]>();
    data.add(new String[] {"Tabla", "TipoEntrada", "Nombre", "TipoDato"});
    for (String key : tablasSimbolos.keySet()) {
      for (SymbolTableObject value : tablasSimbolos.get(key)) {
        data.add(new String[] {key, value.getTipoEntrada(), value.getNombre(), value.getTipoDato()});
      }
    }
    MarkdownTablePrinter tablePrinter = new MarkdownTablePrinter(data, "src/main/test/tabla_sim.md");
    tablePrinter.print();
    System.out.println("Tabla de simbolos exportada a tabla_sim.md");
  }

  /**
  * Función para conseguir el tipo de un símbolo en la tabla de símbolos actual
  * entrada: un string
  * salida: un Expresion.TipoExpresion
  * restricciones: ninguna
  * objetivo: conseguir el tipo de un símbolo en la tabla de símbolos actual
  */
  public TipoExpresion getTipo(String nombre) {
    for (SymbolTableObject value : tablasSimbolos.get(currentHash)) {
      if (value.getNombre().equals(nombre)) {
        return Expresion.tipoFromString(value.getTipoDato());
      }
    }
    return TipoExpresion.NULL;
  }


  /**
  * función para cambiar el hash actual al que se le asocian los símbolos
  * entrada: un string
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: cambiar el hash actual
  */
  public void setHash(String hash) {
    currentHash = hash;
    tablasSimbolos.put(hash, new ArrayList<SymbolTableObject>());
  }
  /**
  * función para agregar un símbolo a la tabla de símbolos
  * entrada: un objeto de la clase SymbolTableObject
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: agregar un símbolo a la tabla de símbolos
  */
  public void addSymbol(SymbolTableObject symbol) {
    tablasSimbolos.get(currentHash).add(symbol);
  }
:}

parser code {:
  Lexer lex;

  /**
  * Constructor de la clase parser
  * entrada: un lexer
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: inicializar el lexer y el symbolFactory
  */
  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }
  /**
  * Sobreescritura de métodos para el manejo de errores
  * entrada: un entero y un símbolo
  * salida: ninguna
  * restricciones: ninguna
  * objetivo: imprimir en consola el error
  */
  public void syntax_error(Symbol token) {
    if (token.value == null){
      return;
    }
    System.out.println("Error de sintaxis en la linea " + token.left + " columna " + token.right + ": " + token.value);
    System.out.println("Continuando...");
  }
  public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
    if (token.value == null){
      throw new Exception("Error de sintaxis irrecuperable al final del archivo");
    }
    throw new Exception("Error de sintaxis irrecuperable en la linea " + token.left + " columna " + token.right + ": " + token.value);
  }



:}

// como se escanean e inicializan los tokens
scan with {: return lex.next_token(); :};
init with {: :};

// Definición de terminales (tokens) a usar
// operaciones aritméticas binarias, renos de Santa 🦌🦌🦌🦌🦌🦌🦌
terminal op_res_rodolfo, op_sum_cupido, op_div_bailarin;
terminal op_mul_cometa, op_mod_rayo, op_pow_travieso;

// operaciones aritméticas unarias, grinch-quien 🎄😈🎅💚
terminal op_inc_quien, op_dec_grinch;

// operadores relacionales, elfos 🧝
terminal op_eq_astuto, op_l_nevado, op_g_alegre, op_geq_feliz;
terminal op_leq_copito, op_neq_chispa; 

// expresiones logicas, reyes magos 👑👑👑
terminal op_and_melchor, op_or_gaspar, op_not_baltasar;

// identificador, persona 🧑
terminal id_persona;

// tipos de datos, nombres de papá noel 🎅🎅🎅🎅🎅🎅
terminal t_int_colacho, t_float_santa, t_bool_noel, t_char_pascuero;
terminal t_string_kris, t_null_reno;

// literales, nombres de papá noel 🎅🎅🎅🎅🎅🎅
terminal l_int_colacho, l_float_santa, l_t_noel, l_f_noel;
terminal l_char_pascuero, l_string_kris;

// parentesis, cuento de navidad 🎄
terminal p_abre_cuento, p_cierra_cuento;

// parentesis cuadrados, abrir empaque 🎁
terminal p_abre_empaque, p_cierra_empaque;

// llaves, abrir regalo 🎁
terminal cb_abre_regalo, cb_cierra_regalo;

// flujo de control, folklore navideño
terminal if_elfo, elif_hada, else_duende, for_envuelve;
terminal do_hace, until_revisa, return_envia, break_corta;

// print-read, habla y escucha 🗣️👂
terminal print_habla, read_escucha;

// fin de expresion, fin regalo 🎁
terminal fin_regalo;

// asignar, entregar 🎁
terminal assign_entregar;

// separador, separador de regalos 🎁
terminal sep_regalo;

// main, navidad 🎄
terminal main_navidad;

// error, carbón 🎁
terminal error_carbon;

// palabras clave de tarea 1
// función, chimenea 🎅
terminal function_chimenea;
// definición de variable, dulce 🍬
terminal local_dulce;

/* Definición de gramática - TAREA 1 */
non terminal navidad;
// no terminales para literales y para tipos
non terminal t_santa, l_santa, args_santa;

// no terminales para definiciones de funciones
non terminal funciones_bolsa_navidena, funcion_ayudante_santa, def_funcion_trineo, bloque_codigo_casa_jengibre; 
non terminal parametros_funcion_renos, parametro_funcion_reno;
// no terminales para definiciones de lineas de código
non terminal linea_hombre_jengibre, lineas_hombre_jengibre;
// no terminales para asignacion de variables y expresiones
non terminal asignacion_adorno, expresion_regalo, elemento_arreglo_juguete, l_arr_gordo, asignacion_existente_nieve;
non terminal expr_ar_regaloprin, expr_rel_regalocomprado, expr_log_regalomanual;
// no terminales para flujo de control
non terminal retorno_carta_santa, llamada_func_pino, do_until_fabrica_juguetes;
non terminal for_vispera, if_travieso, elif_ayudante_lista, elif_lista_santa, else_inocente;

// Precedencia y asociatividad de operadores
precedence left op_res_rodolfo, op_sum_cupido;
precedence left op_div_bailarin, op_mul_cometa;
precedence left op_mod_rayo, op_pow_travieso;
precedence left op_inc_quien, op_dec_grinch;
precedence left op_eq_astuto, op_l_nevado, op_g_alegre, op_geq_feliz;
precedence left op_leq_copito, op_neq_chispa;
precedence left op_and_melchor;
precedence left op_or_gaspar;
precedence left op_not_baltasar;



start with navidad;

navidad ::= funciones_bolsa_navidena 
  {:
    exportarTablaSimbolos();
    imprimirTablaSimbolos();


    if (encontrarFuncion("main") == null) {
      System.out.println("Error de semantica: no se encontro la funcion main");
    }

    for (FirmaFuncion firma : firmasFunciones) {
      if (!firma.isRetornaValor()) {
        System.out.println("Error de semantica: la funcion " + firma.getNombre() + " no tiene return valido");
      }
    }
  :};


t_santa ::= 
  t_int_colacho:t 
  {: RESULT = t; :}
  | t_float_santa:t
  {: RESULT = t; :}
  | t_bool_noel:t 
  {: RESULT = t; :}
  | t_char_pascuero:t
  {: RESULT = t; :}
  | t_string_kris:t 
  {: RESULT = t; :}
;
l_santa ::= 
  l_int_colacho:l
  {: RESULT = new Expresion(l, TipoExpresion.INT); :}
  | l_float_santa:l
  {: RESULT = new Expresion(l, TipoExpresion.FLOAT); :}
  | l_t_noel:l
  {: RESULT = new Expresion(true, TipoExpresion.BOOL); :}
  | l_f_noel:l
  {: RESULT = new Expresion(false, TipoExpresion.BOOL); :}
  | l_char_pascuero:l
  {: RESULT = new Expresion(l, TipoExpresion.CHAR); :}
  | l_string_kris:l
  {: 
    RESULT = new Expresion(l, TipoExpresion.STRING);
  :}
  ;
args_santa ::= expresion_regalo:e
  {: 
    var arrL = new ArrayList<Expresion>();
    arrL.add((Expresion)e);
    RESULT = arrL;
  :}
  | args_santa:args sep_regalo expresion_regalo:e
  {: 
    var arrL = (ArrayList<Expresion>)args;
    arrL.add((Expresion)e);
    RESULT = arrL;
  :}
  ;
  

funciones_bolsa_navidena ::= funcion_ayudante_santa | funciones_bolsa_navidena funcion_ayudante_santa;
funcion_ayudante_santa ::= def_funcion_trineo bloque_codigo_casa_jengibre | error def_funcion_trineo bloque_codigo_casa_jengibre;
// atrapa el error de statements fuera de funciones

def_funcion_trineo ::= 
  function_chimenea:f t_int_colacho main_navidad p_abre_cuento p_cierra_cuento 
  // función main sin parámetros que retorna un int
  {:
    setHash("main");
    addSymbol(new SymbolTableObject("funcion", "int", "main"));
    addFirmaFuncion(new FirmaFuncion("main", TipoExpresion.INT, true, new TipoExpresion[] {}));
    // función main no tiene por qué tener return, por lo tanto lo asignamos true por defecto
  :}
  |
  function_chimenea:f t_santa:tipo id_persona:id p_abre_cuento p_cierra_cuento 
  {:
    setHash(id.toString());
    addSymbol(new SymbolTableObject("funcion", tipo.toString(), id.toString()));
    addFirmaFuncion(new FirmaFuncion(id.toString(), Expresion.tipoFromString(tipo.toString()), false, new TipoExpresion[] {}));
  :}
  | // sin parametros
  function_chimenea:f t_santa:tipo id_persona:id p_abre_cuento
  {: 
    setHash(id.toString());
    addFirmaFuncion(new FirmaFuncion(id.toString(), Expresion.tipoFromString(tipo.toString()), false, new TipoExpresion[] {}));
    addSymbol(new SymbolTableObject("funcion", tipo.toString(), id.toString()));
  :}

  parametros_funcion_renos p_cierra_cuento
  ; // con parametros

parametros_funcion_renos ::= parametro_funcion_reno | parametros_funcion_renos sep_regalo parametro_funcion_reno;
parametro_funcion_reno ::= 
  t_santa:t id_persona:id
  {:
    addSymbol(new SymbolTableObject("parametro", t.toString(), id.toString()));
    // Conseguir la función actual y meterle el parámetro
    functionActual().addTipoParametro(Expresion.tipoFromString(t.toString()));
  :}
  ;
elemento_arreglo_juguete ::= 
  id_persona:id p_abre_empaque expresion_regalo p_cierra_empaque
  {:
    RESULT = id.toString();
  :}  
;

bloque_codigo_casa_jengibre ::= cb_abre_regalo lineas_hombre_jengibre cb_cierra_regalo | cb_abre_regalo error cb_cierra_regalo; // atrapa errores dentro de bloques

retorno_carta_santa ::=
  return_envia expresion_regalo:e 
  {:
    var tipo = ((Expresion)e).getTipo();
    var tipoFuncion = functionActual().getTipoRetorno();
    if (tipo != tipoFuncion) {
      System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de retorno " + tipo.toString() + " no valido para una funcion de tipo " + tipoFuncion.toString());
    }
    else {
      functionActual().setRetornaValor(true);
    }
  
  
  :}
  
  |
  return_envia; // sin expresion de retorno

linea_hombre_jengibre ::= 
  asignacion_adorno fin_regalo|
  retorno_carta_santa fin_regalo|
  expresion_regalo fin_regalo|
  break_corta fin_regalo|
  do_until_fabrica_juguetes fin_regalo|
  for_vispera|
  bloque_codigo_casa_jengibre| // permite bloques sueltos 
  if_travieso|
  error fin_regalo; // recuperación de errores

llamada_func_pino ::= 
  id_persona p_abre_cuento p_cierra_cuento | // a()
  id_persona p_abre_cuento args_santa p_cierra_cuento | 
  print_habla p_abre_cuento args_santa p_cierra_cuento | // print(a)
  print_habla p_abre_cuento p_cierra_cuento | // print() -> Imprimir un salto de linea
  read_escucha p_abre_cuento id_persona p_cierra_cuento | // read(a)
  read_escucha p_abre_cuento elemento_arreglo_juguete p_cierra_cuento; // read(a[1])


lineas_hombre_jengibre ::= linea_hombre_jengibre | lineas_hombre_jengibre linea_hombre_jengibre;

l_arr_gordo ::= cb_abre_regalo args_santa:a cb_cierra_regalo
{:
  var arrL = (ArrayList<Expresion>)a;
  var valido = true;

  // iterar sobre el arreglo y verificar que todos los elementos sean del mismo tipo
  // y que el tipo sea char o int

  TipoExpresion tipo = arrL.get(0).getTipo();
  if (tipo != TipoExpresion.INT && tipo != TipoExpresion.CHAR) {
    System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + tipo.toString() + " no valido para arreglo");
    RESULT = new Expresion("null", TipoExpresion.NULL);
    valido = false;
  }
  for (Expresion e : arrL) {
    if (e.getTipo() != tipo) {
      System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + e.getTipo().toString() + " no valido para un literal de arreglo de tipo " + tipo.toString());
      RESULT = new Expresion("null", TipoExpresion.NULL);
      valido = false;  
      break;
    }
  }

  if (valido){
    // finalmente, retornar una nueva expresión con el tipo de dato del arreglo
    if (tipo == TipoExpresion.INT) {
      RESULT = new Expresion(arrL, TipoExpresion.INT_ARR);
    }
    else {
      RESULT = new Expresion(arrL, TipoExpresion.CHAR_ARR);
    }
  }


:}

;

do_until_fabrica_juguetes ::=
  do_hace bloque_codigo_casa_jengibre until_revisa p_abre_cuento expresion_regalo p_cierra_cuento; // do {} until (a)|

for_vispera ::=
  for_envuelve p_abre_cuento asignacion_existente_nieve fin_regalo expresion_regalo fin_regalo expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre; // for (a| b| c) {}

if_travieso ::=
  if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre| // if (a) {}
  if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista| // if (a) {} elif (b) {} elif ...
  if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre else_inocente| // if (a) {} else {}
  if_elfo p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre elif_ayudante_lista else_inocente; // if (a) {} elif (b) {} elif ... else {}

elif_ayudante_lista ::=
  elif_lista_santa | elif_ayudante_lista elif_lista_santa;

elif_lista_santa ::=
  elif_hada p_abre_cuento expresion_regalo p_cierra_cuento bloque_codigo_casa_jengibre;

else_inocente ::=
  else_duende bloque_codigo_casa_jengibre;

asignacion_adorno ::= 
  local_dulce t_santa:t id_persona:id 
  {:
    addSymbol(new SymbolTableObject("local", t.toString(), id.toString()));
  :} 
  | // local int a|
  local_dulce:l t_santa:t id_persona:el p_abre_empaque l_int_colacho:l_int p_cierra_empaque
  {:
    if(t.toString() != "int" && t.toString() != "char"){
      System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + t.toString() + " no valido para arreglo");
    }
    else {

      var i_arr = (int)l_int;
      if (i_arr <= 0) {
        System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Longitud de arreglo " + i_arr + " no valida");
      }
      else {
        addSymbol(new SymbolTableObject("local", t.toString() + "[]", el.toString()));
      }
    }
  :}
  | // local int a[1]|
  local_dulce t_santa:t id_persona:id assign_entregar expresion_regalo 
  {:
    addSymbol(new SymbolTableObject("local", t.toString(), id.toString()));
  :}
  | // local int a <= 1|
  local_dulce:l t_santa:t id_persona:el p_abre_empaque l_int_colacho:l_int p_cierra_empaque assign_entregar l_arr_gordo:l_arr
  {:
    if (t.toString() != "int" && t.toString() != "char") {
      System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + t.toString() + " no valido para arreglo");
    }
    else {
      // Si llegamos aquí, sabemos que el tipo que buscamos es int o char
      // Y que recibimos un literal de arreglo que puede estar mal formado (NULL)
      // O bien formado con un tipo de dato que no es el que buscamos
      var e_arr = (Expresion)l_arr;
      if (e_arr.getTipo() == TipoExpresion.NULL){
        System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Literal de arreglo mal formado");
      }
      else {

        TipoExpresion tipo = Expresion.tipoFromString(t.toString() + "[]");

        if (e_arr.getTipo() != tipo){
          System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + e_arr.getTipo().toString() + " no valido para una variable de tipo " + tipo.toString());
        }
        else {
          // finalmente, asegurar que la longitud es la misma entre el arreglo y el literal
          var arr = (ArrayList<Expresion>)e_arr.getValor();
          if ((int)l_int != arr.size()) {
            System.out.println("Error de semantica en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Longitud de arreglo " + l_int + " no coincide con la longitud del literal de arreglo " + arr.size());
          }
          else {
            addSymbol(new SymbolTableObject("local", t.toString() + "[]", el.toString()));
          }

        }
      }
    }
  :}
  | // local int a[1] <= {1}
  asignacion_existente_nieve; // si ya existe la variable, no se agrega a la tabla de simbolos

asignacion_existente_nieve ::=
  id_persona assign_entregar expresion_regalo| // a <= 1|
  elemento_arreglo_juguete assign_entregar expresion_regalo; // a[1] <= 1|

expresion_regalo ::=
  l_santa:l
  {:
    RESULT = l;
  :}
  | 
  id_persona:id
  {:
    RESULT = new Expresion(id.toString(), getTipo(id.toString()));
  :}
  | 
  elemento_arreglo_juguete:eaj
  {:
    RESULT = new Expresion(eaj.toString(), getTipo(eaj.toString()));
  :}
  | p_abre_cuento expresion_regalo:e p_cierra_cuento
  {: RESULT = e; :}
  | expr_ar_regaloprin:e
  {: RESULT = e; :}
  | expr_rel_regalocomprado:e
  {: RESULT = e; :}
  | expr_log_regalomanual:e
  {: RESULT = e; :}
  | llamada_func_pino:e
  {: RESULT = e; :};

expr_ar_regaloprin ::= 
  expresion_regalo op_res_rodolfo expresion_regalo | // a - b
  expresion_regalo op_sum_cupido expresion_regalo | // a + b
  expresion_regalo op_div_bailarin expresion_regalo | // a / b
  expresion_regalo op_mul_cometa expresion_regalo | // a * b
  expresion_regalo op_mod_rayo expresion_regalo | // a ~ b
  expresion_regalo op_pow_travieso expresion_regalo | // a ** b
  op_inc_quien id_persona | // ++a
  op_dec_grinch id_persona | // --a
  op_dec_grinch elemento_arreglo_juguete | // --a[1]
  op_inc_quien elemento_arreglo_juguete; // ++a[1]

expr_rel_regalocomprado ::=
  expresion_regalo op_eq_astuto expresion_regalo | // a == b
  expresion_regalo op_l_nevado expresion_regalo | // a < b
  expresion_regalo op_g_alegre expresion_regalo | // a > b
  expresion_regalo op_geq_feliz expresion_regalo | // a => b
  expresion_regalo op_leq_copito expresion_regalo | // a =< b
  expresion_regalo op_neq_chispa expresion_regalo; // a != b

expr_log_regalomanual ::=
  expresion_regalo op_and_melchor expresion_regalo | // a ^ b
  expresion_regalo op_or_gaspar expresion_regalo | // a # b
  op_not_baltasar expresion_regalo; // !a

/*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*/